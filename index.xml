<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inattentional Coffee on Inattentional Coffee</title>
    <link>https://katherinemwood.github.io/</link>
    <description>Recent content in Inattentional Coffee on Inattentional Coffee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Katherine</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Oh, joy! Joyplots in R with ggjoy</title>
      <link>https://katherinemwood.github.io/post/joy/</link>
      <pubDate>Fri, 14 Jul 2017 14:42:32 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/joy/</guid>
      <description>&lt;p&gt;I’ve &lt;a href=&#34;https://katherinemwood.github.io/post/violins/&#34;&gt;written before&lt;/a&gt; about plots that are more informative than your standard barplot.&lt;/p&gt;
&lt;p&gt;Another option is the joyplot (also known as &lt;a href=&#34;http://www.brendangregg.com/frequencytrails.html&#34;&gt;frequency trails&lt;/a&gt;). Joyplots are like mountain ranges, except instead of mountains it’s smoothed density histograms. It’s a way to visualize a lot of data in a pretty compact space.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/clauswilke/ggjoy&#34;&gt;Claus Wilke has written an R package&lt;/a&gt; that makes plotting these pretty frictionless. Just add data!&lt;/p&gt;
&lt;p&gt;I’ll whip up some fake data to play with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(123)
joy &amp;lt;- data.frame(&amp;#39;label&amp;#39;=rep(letters[1:10], each=100),
                  &amp;#39;value&amp;#39;=as.vector(mapply(rnorm, rep(100, 10), rnorm(10), SIMPLIFY=TRUE)),
                  &amp;#39;rank&amp;#39;=rep(1:5, each=100, times=20))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s an example in which the distributions are allowed to overlap vertically, giving the appearance that they are stacked.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suppressPackageStartupMessages({
  library(ggjoy)
  library(dplyr)})

ggplot(joy, aes(x=value, y=label)) +
  geom_joy(scale=2, rel_min_height=.03) +
  scale_y_discrete(expand = c(0.01, 0)) +
  xlab(&amp;#39;Value&amp;#39;) +
  theme_joy() +
  theme(axis.title.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 0.209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/joy_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt; To make things look more orderly, and since our labels have no inherent order, we can order the data according to the mean. This isn’t neccessary if your y-axis is time, for instance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;joy &amp;lt;- group_by(joy, label) %&amp;gt;%
       mutate(m=mean(value)) %&amp;gt;%
       arrange(m) %&amp;gt;%
       ungroup() %&amp;gt;%
       mutate(label=factor(label, unique(label)))

ggplot(joy, aes(x=value, y=label)) +
  geom_joy(scale=2, rel_min_height=.03) +
  scale_y_discrete(expand = c(0.01, 0)) +
  xlab(&amp;#39;Value&amp;#39;) +
  theme_joy() +
  theme(axis.title.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 0.209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/joy_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Some people don’t like this overlap (for the aesthetics or because it can obscure the data) so here’s an example if we spread everybody out so that they don’t touch. The amount of overlap is easily controlled by the &lt;code&gt;scale&lt;/code&gt; argument in geom_joy. &lt;code&gt;scale = 1&lt;/code&gt; means no overlap; the higher this value, the more the distributions will overlap.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(joy, aes(x=value, y=label)) +
  geom_joy(scale=1, rel_min_height=.01) +
  scale_y_discrete(expand = c(0.001, 0)) +
  xlab(&amp;#39;Value&amp;#39;) +
  theme_joy() +
  theme(axis.title.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 0.209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/joy_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;How about some color? Color can be used to separate groups:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(joy, aes(x=value, y=label, fill=as.factor(rank))) +
  geom_joy(scale=1, rel_min_height=.01) +
  scale_y_discrete(expand = c(0.01, 0)) +
  xlab(&amp;#39;Value&amp;#39;) +
  labs(fill=&amp;#39;Rank&amp;#39;) +
  theme_joy() +
  theme(axis.title.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 0.209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/joy_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or, if your data doesn’t have grouping structure, it can just be used to break things up a little bit. (See &lt;a href=&#34;https://twitter.com/hnrklndbrg/status/883675698300420098&#34;&gt;this tweet&lt;/a&gt; for another example.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(joy, aes(x=value, y=label, fill=label)) +
  geom_joy(scale=3, rel_min_height=0.01) +
  scale_fill_manual(values=rep(c(&amp;#39;gray&amp;#39;, &amp;#39;lightblue&amp;#39;), length(unique(joy$label))/2)) + 
  scale_y_discrete(expand = c(0.01, 0)) +
  xlab(&amp;#39;Value&amp;#39;) +
  theme_joy() +
  theme(axis.title.y = element_blank(),
        legend.position=&amp;#39;none&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 0.209&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/joy_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;How about some joyful facets?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(filter(joy, rank != 5), aes(x=value, y=label)) +
  geom_joy(scale=1, rel_min_height=.03) +
  scale_y_discrete(expand = c(0.01, 0)) +
  xlab(&amp;#39;Value&amp;#39;) +
  facet_wrap(~rank, scales=&amp;#39;free&amp;#39;) +
  theme_joy() +
  theme(axis.title.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 0.212&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/joy_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can check out &lt;a href=&#34;https://cran.r-project.org/web/packages/ggjoy/vignettes/introduction.html&#34;&gt;the vignette&lt;/a&gt; for more examples and more information. You can also &lt;a href=&#34;https://cran.r-project.org/web/packages/ggjoy/ggjoy.pdf&#34;&gt;check out the docs&lt;/a&gt; for information on, for example, how the density is calculated and what your options are for that.&lt;/p&gt;
&lt;p&gt;If you want to play around with these yourself, you can make up data (like I did) or check out the examples in the vignette for datasets to use that will make cool plots. Who knows–you might even find the iris dataset fun again if you use it to make joyplots.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Considerations when writing a preregistration if you&#39;re new to all this</title>
      <link>https://katherinemwood.github.io/post/prereg/</link>
      <pubDate>Mon, 26 Jun 2017 16:11:46 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/prereg/</guid>
      <description>&lt;p&gt;(Note: I apparently use preregistration and pre-registration interchangeably, because I guess I want to have my hyphenation cake and eat it, too.)&lt;/p&gt;
&lt;p&gt;I’m a selfish preregisterer (Preregisterizer? Preregistrar? Preregistrix?). I preregister experiments primarily for my own benefit. I make as many decisions as I can up front, when I’m unbiased and unattached. Yes, it’s more transparent, and yes, it provides a record to others that you made your decisions ahead of time and not in a post-hoc way. But I mostly do it for myself.&lt;/p&gt;
&lt;p&gt;Like Odysseus tying himself to the mast, preregistration saves you from the siren song of totally justifiable post-hoc decisions that just happen to make things work a little more nicely. I do think that usually this isn’t ill-intentioned or even necessarily deliberate, but I do think it is extremely hard (if not impossible) to make decisions in an unbiased way once the data have started coming in.&lt;/p&gt;
&lt;p&gt;Preregistration can be an asset, not an extra chore. It eliminates decision points, which speeds up the process considerably (especially in the analysis stage). It provides a record to yourself of your methods, analysis intentions, and motivating rationale. It also, of course, provides this same record to others.&lt;/p&gt;
&lt;p&gt;So, what are some things you might want to think about when writing a pre-registration if you’re just starting out?&lt;/p&gt;
&lt;div id=&#34;what-are-your-hypotheses-and-predictions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. What are your hypotheses and predictions?&lt;/h1&gt;
&lt;p&gt;Why are you running this study? What hypotheses are you interested in testing, or what theories are you exploring? Do you have predictions about how the data will look, or a set of possible outcomes depending on what mechanisms are at work? Can you generate hypothetical/example data for these possibilities?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-many-subjects&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. How many subjects?&lt;/h1&gt;
&lt;p&gt;How many people are you going to run, and why? Maybe you do a power analysis to figure out how many you would need to find your smallest effect size of interest, maybe you just always like to run 50 people per group. However you decide on your number, you want to decide on this upfront.&lt;/p&gt;
&lt;p&gt;Alternatively, if you’re going to be doing a sequential analysis, where you periodically inspect the data over the course of collection and stop once you’ve reached some threshold (such as a Bayes factor of 10 in either support of the alternative or support of the null), you’ll want to specify those details. What is the stopping point? How many batches will you run?&lt;/p&gt;
&lt;p&gt;How will you be recruiting people? What’s their compensation? Are their any inclusion criteria they have to meet (right-handed, normal or corrected-normal vision, etc)?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-are-your-methods&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. What are your methods?&lt;/h1&gt;
&lt;p&gt;How are you going to run the study? To address this, I usually like to just write the methods section. I think it’s important to be detailed here because you want to prevent nudging of the experimental procedure if it “doesn’t seem to be working.” If possible, can you upload your experimental script as it will be run and all of the stimuli?&lt;/p&gt;
&lt;p&gt;If you always test in the same place in the same way, you could write up a general equipment page that you link to in addition to the details of your particular study (if you always use the same eyetracker, for example).&lt;/p&gt;
&lt;p&gt;This will make writing the methods section a breeze when the time comes!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-your-analysis-plan&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;4. What is your analysis plan?&lt;/h1&gt;
&lt;p&gt;How are you going to analyze the data? What kind of tests are you going to do, and between which conditions? Are there conditions under which you will pool observations across conditions? You want to make all of these decisions before you have any idea what the data are. .&lt;/p&gt;
&lt;p&gt;If possible, can you upload the very script you’ll use to analyze the data?&lt;/p&gt;
&lt;p&gt;How are you going to code free-responses? If people have to be classified, how are you going to do it? In the research I do, I run a lot of inattentional blindness studies. One of the things we have to decide is how to determine “noticers” (people who saw the unexpected event) from “nonnoticers” (people who missed it). This is a very consequential decision, and is definitely not one we want to have any flexibility over after the data have come in.&lt;/p&gt;
&lt;p&gt;Are you going to exclude subjects or observations? Under what conditions? Try to imagine every possible reason you might need to exclude someone and list it. These can be things like failing attention checks, performing below chance on some critical accuracy measure, falling asleep during the experiment, reporting colorblindness during a color-based study, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;practice-makes-perfect&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Practice makes perfect&lt;/h1&gt;
&lt;p&gt;I wasn’t sure about this whole preregistration thing when I first started. It seemed like just another chore, and I was on the up and up, so why did I need to do this, anyway? But after I ran my first preregistered experiment, I came to appreciate the absence of flexibility. Even in what I expected to be a completely straightforward experiment, there were dozens of little decisions I could have made in the moment. It was so freeing to be able to just stick to the plan and have all the decisions made ahead of time. No agonizing, no doubting, no trying a million different things in the off-chance that some other analysis would look better. I just followed my map right out of the garden of forking paths.&lt;/p&gt;
&lt;p&gt;If you want to start pre-registering your work, the &lt;a href=&#34;https://osf.io/&#34;&gt;Open Science Framework&lt;/a&gt; is a great option. There’s also AsPredicted.&lt;/p&gt;
&lt;p&gt;Preregistering a study for the first time can feel strange, particularly if you’re accustomed to running non-preregistered studies. When you’re used to dealing with problems and decision points as they emerge over the course of a study, rather than anticipating them ahead of time, it can be hard to even enumerate them. Like anything, though, it gets much easier with practice.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>One day build: Shiny effect sizes</title>
      <link>https://katherinemwood.github.io/post/shiny_es/</link>
      <pubDate>Mon, 26 Jun 2017 16:09:00 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/shiny_es/</guid>
      <description>&lt;p&gt;It had been a long time since I had built anything, and I needed to scratch the itch. I decided to build a Shiny port of &lt;a href=&#34;https://osf.io/ixGcd/&#34;&gt;Daniël Lakens’s beloved effect size calculator spreadsheets&lt;/a&gt;. You can find the app itself &lt;a href=&#34;https://katherinemwood.shinyapps.io/lakens_effect_sizes/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These sheets are handy for a number of reasons, primarily if a paper or talk reports stats but no effect sizes (or if you want to double-check reported stats or effect sizes). I thought it would be convenient to have an online version.&lt;/p&gt;
&lt;p&gt;All of the math is based on what’s used in the spreadsheet, and the default examples are taken from there too.&lt;/p&gt;
&lt;p&gt;This was a really fun build, mostly because the actual math was pretty straightforward (and I could easily check it against the spreadsheets to make sure it was working, which is a refreshing change). I got to spend more time digging into the web-dev side of things, dealing with layout and the reactivity of the components of the app. I learned a lot, and it was great to be working with Shiny again.&lt;/p&gt;
&lt;p&gt;The code is &lt;a href=&#34;https://github.com/katherinemwood/lakens_effect_sizes&#34;&gt;on Github&lt;/a&gt;. Suggestions for improvements and bug reporting encouraged!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to unit testing in R</title>
      <link>https://katherinemwood.github.io/post/testthat/</link>
      <pubDate>Mon, 26 Jun 2017 15:46:23 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/testthat/</guid>
      <description>&lt;p&gt;I’ve mentioned before that a great coding practice you can ingrain into your work is unit testing. The idea is simple: you write a script that automatically evaluates pieces of your code and checks it against expected behavior. For example, a correlation coefficient should always be between -1 and 1, so you could write a test that will raise an error if it encounters an r beyond these values. Or, you could check your data file after it’s read in to make sure it reads in with all rows and columns, nothing missing where it shouldn’t be, and every column of the data type you want it.&lt;/p&gt;
&lt;p&gt;Hadley Wickham wrote an awesome R package that makes writing tests easy and pretty intuitive. In the &lt;code&gt;testthat&lt;/code&gt; package, you can bundle a series of &lt;code&gt;expect_that&lt;/code&gt; statements into a &lt;code&gt;test_that&lt;/code&gt; suite, which ideally would run a small cluster of closely related tests. Multiple &lt;code&gt;test_that&lt;/code&gt; suites can be grouped into a &lt;code&gt;context&lt;/code&gt; that tests an entire file, or a big chunk of functionality inside a file.&lt;/p&gt;
&lt;p&gt;I’ll walk through examples. Code for this is up on GitHub, like always.&lt;/p&gt;
&lt;p&gt;So first, to get things set up, you have a file that you want to test, and then you make a test script to go along with it. If you want to set up automated testing, name this file &lt;code&gt;test_something.R&lt;/code&gt;. &lt;code&gt;testthat&lt;/code&gt; looks for files that start with &lt;code&gt;test_&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once your file is set up, we can start writing tests! First, you source in the file that you’ll be testing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;source(&amp;#39;dummy_script.R&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing I’ll be testing is that the data I defined in the dummy script meets my expectations. For reference, this is the data file I defined, but we can pretend I read it in from somewhere:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;testing_data &amp;lt;- data.frame(&amp;#39;letters&amp;#39;=c(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;),
                          &amp;#39;numbers&amp;#39;=seq(1, 4))
print(testing_data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   letters numbers
## 1       a       1
## 2       b       2
## 3       c       3
## 4       d       4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creative, huh?&lt;/p&gt;
&lt;p&gt;So, because this dummy script has multiple different parts that will all get tested, I’m first going to set a context just for the data. Doing so couldn’t be easier:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;context(&amp;#39;testing data integrity&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This just gives the test block a readable label that prints during output. Typically you have one context per file, but I’ve got multiple in this file for demo purposes.&lt;/p&gt;
&lt;p&gt;Within a context, you have tests. Tests are best deployed to test very targeted functionality, and each test contains a small number of expect statements that define expected behavior. Here’s an example with our silly data frame. We want to make sure it has the expected number of columns and rows, so we could write a test that checks for this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_that(&amp;#39;data dimensions correct&amp;#39;, {
    expect_equal(ncol(testing_data), 2)
    expect_equal(nrow(testing_data), 4)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we’re saying is we expect the actual number of columns in our data, returned by ncol(), to be equal to our number of variables (here 2), and that we should have four subjects. The first argument to &lt;code&gt;expect_equal&lt;/code&gt; is what we’re testing, and the second argument is what that thing should be equal to (both of these tests pass).&lt;/p&gt;
&lt;p&gt;This is sort of a goofy example, but you can imagine real applications–making sure your data has the right number of variables, for instance, or making sure that you have as many files as you do subjects to make sure data isn’t missing. If you’ve examined your data up using &lt;code&gt;View()&lt;/code&gt; or &lt;code&gt;head()&lt;/code&gt; just to check, you’ve pretty much done the manual equivalent of this test.&lt;/p&gt;
&lt;p&gt;We could also check that no values are missing:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_that(&amp;#39;no missing values&amp;#39;, {
    expect_identical(testing_data, na.omit(testing_data))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a different expect statement. This is &lt;code&gt;expect_identical&lt;/code&gt;, which has no tolerance (unlike &lt;code&gt;expect_equal&lt;/code&gt;). We should have exactly the same thing after removing missing values if we’re not anticipating any. (There’s also an &lt;code&gt;expect_equivalent&lt;/code&gt; statement, which ignores the attributes of its comparators. There are about 22 different &lt;code&gt;expect_&lt;/code&gt; statements–you can read more about them in the &lt;a href=&#34;http://r-pkgs.had.co.nz/tests.html&#34;&gt;package documentation&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;How about we check to make sure our data is of the right type? We can use &lt;code&gt;expect_is()&lt;/code&gt;, which checks if the first argument inherits from the class specified in the second argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_that(&amp;#39;data types correct&amp;#39;, {
    expect_is(testing_data,&amp;#39;data.frame&amp;#39;)
    expect_is(testing_data$numbers, &amp;#39;integer&amp;#39;)
    #expect_is(testing_data$letters, &amp;#39;character&amp;#39;) #this one fails; they&amp;#39;re factors
})

#note that an equivalent statement would be:

expect_that(testing_data, is_a(&amp;#39;data.frame&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This might seem silly, but I’ve been burned before by not realizing that what I thought was numeric data was actually stored as a factor. Never hurts to check before you start analyzing!&lt;/p&gt;
&lt;p&gt;We can also, for example, run tests to make sure outputs from models conform to expectations. Here’s our toy model:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_data = data.frame(&amp;#39;y&amp;#39;=c(rnorm(25, 0, 1), rnorm(25, 1, 1)),
&amp;#39;x&amp;#39;=rep(c(&amp;#39;c1&amp;#39;, &amp;#39;c2&amp;#39;), each=25))
test.mod = lm(y ~ x, data=model_data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we could test, for example, that we have the expected number of coefficients:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_that(&amp;#39;right number of coefficients&amp;#39;, {
    expect_equal(length(test.mod$coefficients), 2)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or that all the factor levels in the data are also in the model (here we have to be mindful about differences in data type; &lt;code&gt;levels&lt;/code&gt; returns a character string, while the model object returns a named list).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_that(&amp;#39;all factor levels present&amp;#39;, {
    expect_equivalent(levels(model_data$x), unlist(test.mod$xlevels))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How about verifying that the intercept equals the mean of our first group? Because one value is named and the other isn’t, &lt;code&gt;expect_equivalent&lt;/code&gt; will be the statement to use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_that(&amp;#39;mean of group 1 equals intercept&amp;#39;, {
    expect_equivalent(mean(model_data$y[model_data$x == &amp;#39;c1&amp;#39;]), test.mod$coefficients[&amp;#39;(Intercept)&amp;#39;])
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a very simple model, but you can imagine how it would be useful for a more complicated one.&lt;/p&gt;
&lt;p&gt;We can also test custom functions that we’ve written. I’ve written a silly little function that tells you whether a number is even or odd:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;even_odd = function(n){
    ifelse(n %% 2 == 0, print(&amp;#39;even&amp;#39;), print(&amp;#39;odd&amp;#39;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can make sure it reports the correct output. We can do this even though it prints (instead of returning a value) with prints_text:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_that(&amp;#39;even_odd prints the right message&amp;#39;, {
    expect_that(even_odd(1), prints_text(&amp;#39;odd&amp;#39;))
    expect_that(even_odd(6), prints_text(&amp;#39;even&amp;#39;))
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you have the library loaded in and you’ve set the working directory to the right place, you can run the testing suite by calling &lt;code&gt;test_file(&#39;file_to_test.R&#39;)&lt;/code&gt;. The advantage to calling this function, rather than just sourcing the file, is that it will run through all tests even if some fail. When you source it, the test script halts at the first error. If you have multiple testing files, you can call &lt;code&gt;test_dir(&#39;my_test_dir/&#39;)&lt;/code&gt; instead, and it will run all of the &lt;code&gt;test_&lt;/code&gt; files in that directory.&lt;/p&gt;
&lt;p&gt;Here’s what output looks like. You can see that all of our tests are grouped under their contexts, which is a nice way to organize things. Each little dot is a successful test, while a number indicates a failure (with more detail printed below).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; test_file(&amp;#39;test_dummy.R&amp;#39;)
testing data integrity: .....1
testing model output: ...
testing a custom function: ..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we look in detail at the failure, we see that it’s titled with the name of our test_that suite (another good reason to be granular with how you organize your tests!), and then we see what went wrong:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Failed ---------------------------------------------------------------------------------------------
1. Failure: data types correct (@test_dummy.R#17) -----------------------------------------------------
testing_data$letters inherits from `factor` not `character`.


DONE ===============================================================================================&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the context tells us which group of tests threw the error, and then the more detailed error message tells us which test failed (“data types correct” in the “data integrity” context). It also tells us exactly why the test failed. We wanted the data type to be a character, but it was read in as a factor. This alerts us that we need to set &lt;code&gt;stringsAsFactors&lt;/code&gt; equal to &lt;code&gt;FALSE&lt;/code&gt; when reading in our data (for example).&lt;/p&gt;
&lt;p&gt;Here are some general tips on writing tests from Wickham:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Focus on testing the external interface to your functions - if you test the internal interface, then it’s harder to change the implementation in the future because as well as modifying the code, you’ll also need to update all the tests.&lt;br /&gt;
Strive to test each behaviour in one and only one test. Then if that behaviour later changes you only need to update a single test.&lt;br /&gt;
Avoid testing simple code that you’re confident will work. Instead focus your time on code that you’re not sure about, is fragile, or has complicated interdependencies. That said, I often find I make the most mistakes when I falsely assume that the problem is simple and doesn’t need any tests. Always write a test when you discover a bug. You may find it helpful to adopt the test-first philosophy. There you always start by writing the tests, and then write the code that makes them pass. This reflects an important problem solving strategy: start by establishing your success criteria, how you know if you’ve solved the problem. The nice thing about testing is that you can re-run the entire, automated set of tests any time you make a change to make sure you didn’t break anything. It’s a lot faster and more consistent than print-debugging or command-line inspection, and it will save you time if you write your tests early (or even before) in the coding process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intro to R Notebooks</title>
      <link>https://katherinemwood.github.io/post/notebooks/</link>
      <pubDate>Mon, 26 Jun 2017 15:36:22 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/notebooks/</guid>
      <description>&lt;p&gt;This notebook is based loosely on &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf&#34;&gt;this cheatsheet&lt;/a&gt; that shows some of the most basic functionality of R notebooks, including code, markdown, and Latex.&lt;/p&gt;
&lt;div id=&#34;code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Code&lt;/h1&gt;
&lt;div id=&#34;chunks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chunks&lt;/h2&gt;
&lt;p&gt;You can imbed chunks of R code right into the notebooks and run them. Why not beat that long-dead horse of demo data, the iris dataset?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you print a dataframe, it automatically gets formatted in this nice way.&lt;/p&gt;
&lt;p&gt;We can also look at the summary:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   
##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  
##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  
##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  
##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  
##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  
##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  
##        Species  
##  setosa    :50  
##  versicolor:50  
##  virginica :50  
##                 
##                 
## &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course, you can use whatever libraries you like, as usual. We can set an option in this chunk to disable the messages that print to the console when you do things like load libraries. We could also turn off warnings, set options for error handling, or specify how we want results and code interleaved, or if we want the code in the output document at all. Setting the &lt;code&gt;tidy&lt;/code&gt; argument to &lt;code&gt;TRUE&lt;/code&gt; also spiffs up your code for you (cleaning up multiline expressions with indenting, for instance) in the output. So customizable!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
(meanpetals &amp;lt;- group_by(iris, Species) %&amp;gt;%
               summarize(length = mean(Petal.Length), width = mean(Petal.Width)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##      Species length width
##       &amp;lt;fctr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     setosa  1.462 0.246
## 2 versicolor  4.260 1.326
## 3  virginica  5.552 2.026&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boring old data demos never looked so fresh!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inline&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inline&lt;/h2&gt;
&lt;p&gt;Inline code executes invisibly, so all you see is the output. For example, I can run a function right here and now to get the weekday:&lt;/p&gt;
&lt;p&gt;Today is a Saturday.&lt;/p&gt;
&lt;p&gt;That was accomplished by simply adding a back-ticked &lt;code&gt;r&lt;/code&gt; prefix to a call to &lt;code&gt;weekdays(Sys.time())&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also set global parameters in the header and reference them throughout the document.&lt;/p&gt;
&lt;p&gt;This inline execution has various uses. If you need code primarily for its output, like getting the current date or weekday and adding it into text, then inline works really well and better than a chunk.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;displaying-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Displaying Data&lt;/h1&gt;
&lt;p&gt;If you’re writing up a tutorial or a report on results, you’ll more likely than not need to display data in the form of plots and tables. This is super easy in R Notebooks, and there are lots of options.&lt;/p&gt;
&lt;div id=&#34;plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plots&lt;/h2&gt;
&lt;p&gt;Let’s see what the sepal lengths in Iris are up to by species, just for kicks. I’ll do some more extensive data manipulation in a code chunk, just to show we can. Since I loaded dplyr in another code chunk further up, we’re good there.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
iris_plot &amp;lt;- ggplot(data=select(iris, Species, Sepal.Length), 
                    aes(x=Species, y=Sepal.Length, color=Species, fill=Species)) +
  geom_violin(alpha=.1) +
  geom_point(position=position_jitter(w=.2)) +
  geom_crossbar(stat=&amp;#39;summary&amp;#39;,fun.y=mean, fun.ymax=mean, fun.ymin=mean, fatten=2, width=.5) +
  theme_minimal()
print(iris_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/notebooks_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Fascinating, I guess!&lt;/p&gt;
&lt;p&gt;The nice thing about this is that these plots are completely reproduceable–they’ll be generated everytime you run the notebook. You can keep the code cell that generates it in the output, so people can see it, or if you want a cleaner output with just the results, you can hide the generating code cell. You can tailor it to your options.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;p&gt;Tables can be a real pain-point when doing manuscripts, but these can be automated in R Notebooks, rendered right into text, and some look pretty good. Here’s what &lt;code&gt;knitr&lt;/code&gt; will give you (it won’t look right until it’s rendered):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(meanpetals)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Species&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;length&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;width&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;setosa&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.462&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.246&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;versicolor&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.260&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.326&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;virginica&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.552&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.026&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That looks alright!&lt;/p&gt;
&lt;p&gt;There’s also &lt;code&gt;xtable,&lt;/code&gt; which will make it easier to set the appearance of the table through HTML attributes. This won’t show up until it’s rendered, though.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(xtable::xtable(meanpetals), type=&amp;#39;html&amp;#39;, html.table.attributes=&amp;#39;border=0  width=250&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- html table generated in R 3.4.0 by xtable 1.8-2 package --&gt;
&lt;!-- Sat Jul  1 14:39:42 2017 --&gt;
&lt;table border=&#34;0&#34; width=&#34;250&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
Species
&lt;/th&gt;
&lt;th&gt;
length
&lt;/th&gt;
&lt;th&gt;
width
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
1
&lt;/td&gt;
&lt;td&gt;
setosa
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.46
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
0.25
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
2
&lt;/td&gt;
&lt;td&gt;
versicolor
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
4.26
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
1.33
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
3
&lt;/td&gt;
&lt;td&gt;
virginica
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
5.55
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
2.03
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Finally, here’s a table fron the &lt;code&gt;stargazer&lt;/code&gt; package. Also lots of attributes we can set here. It’s designed mostly for pretty formatting of regression model results and summary stats, but we can get it to do direct output instead.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stargazer::stargazer(as.data.frame(meanpetals), type=&amp;#39;html&amp;#39;, summary=F)&lt;/code&gt;&lt;/pre&gt;
&lt;table style=&#34;text-align:center&#34;&gt;
&lt;tr&gt;
&lt;td colspan=&#34;4&#34; style=&#34;border-bottom: 1px solid black&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;
&lt;/td&gt;
&lt;td&gt;
Species
&lt;/td&gt;
&lt;td&gt;
length
&lt;/td&gt;
&lt;td&gt;
width
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&#34;4&#34; style=&#34;border-bottom: 1px solid black&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;
1
&lt;/td&gt;
&lt;td&gt;
setosa
&lt;/td&gt;
&lt;td&gt;
1.462
&lt;/td&gt;
&lt;td&gt;
0.246
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;
2
&lt;/td&gt;
&lt;td&gt;
versicolor
&lt;/td&gt;
&lt;td&gt;
4.260
&lt;/td&gt;
&lt;td&gt;
1.326
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;
3
&lt;/td&gt;
&lt;td&gt;
virginica
&lt;/td&gt;
&lt;td&gt;
5.552
&lt;/td&gt;
&lt;td&gt;
2.026
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td colspan=&#34;4&#34; style=&#34;border-bottom: 1px solid black&#34;&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If none of the formatting is quite to your liking, or you don’t have easily available options to set, you can tweak the appearance with your &lt;a href=&#34;http://rmarkdown.rstudio.com/html_document_format.html#custom_css&#34;&gt;own CSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If none of this is satisfying, or it’s more informal, you can always just print the dataframe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(meanpetals)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##      Species length width
##       &amp;lt;fctr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     setosa  1.462 0.246
## 2 versicolor  4.260 1.326
## 3  virginica  5.552 2.026&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t know that this makes tables any less painless, but at least now there’s more than one option for the pain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;formatting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Formatting&lt;/h1&gt;
&lt;p&gt;If you’re writing up a report or manuscript, you also need your text to look nice, not just your data. This is where knowing a little bit of Markdown comes in handy.&lt;/p&gt;
&lt;div id=&#34;markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Markdown&lt;/h2&gt;
&lt;p&gt;Just type to get pretty plaintext. To quote &lt;code&gt;verbatim code&lt;/code&gt; without running anything, wrap it in backticks(`). This is distinct from inline code, which is prefaced with &lt;code&gt;r&lt;/code&gt; within the ticks. I’ll do this throughout to demonstrate how to construct the effects you see.&lt;/p&gt;
&lt;p&gt;To display a special character, like _underscores_ or asterisks *, escape them with a backslash (\).&lt;/p&gt;
&lt;p&gt;To add a single linebreak without a blank line, end a line with two spaces.&lt;code&gt;..&lt;/code&gt;&lt;br /&gt;
Ta-da!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*italics*&lt;/code&gt;: &lt;em&gt;italics&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;**bold**&lt;/code&gt;: &lt;strong&gt;bold&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;**_both_**&lt;/code&gt;: &lt;strong&gt;&lt;em&gt;both&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;~~strikethrough~~&lt;/code&gt;: &lt;del&gt;strikethrough&lt;/del&gt;&lt;br /&gt;
&lt;code&gt;subscript~1~&lt;/code&gt;: subscript&lt;sub&gt;1&lt;/sub&gt;&lt;br /&gt;
&lt;code&gt;superscript^2^&lt;/code&gt;: superscript&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;You can do bulleted lists:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;* start with an asterisk, plus, or minus&lt;/code&gt; &lt;code&gt;+ then indent 4 spaces&lt;/code&gt; &lt;code&gt;- then indent again&lt;/code&gt; &lt;code&gt;* then more stuff&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start with an asterisk, plus, or minus
&lt;ul&gt;
&lt;li&gt;then indent 4 spaces
&lt;ul&gt;
&lt;li&gt;then indent again&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;then more stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And ordered ones:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1. Big thing&lt;/code&gt; &lt;code&gt;i) small thing \+ indent&lt;/code&gt; &lt;code&gt;A. sub-small thing&lt;/code&gt; &lt;code&gt;2. Another big thing&lt;/code&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Big thing
&lt;ol style=&#34;list-style-type: lower-roman&#34;&gt;
&lt;li&gt;small thing + indent&lt;br /&gt;
A. sub-small thing&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Another big thing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Oh, and footnotes… &lt;code&gt;[^1]&lt;/code&gt; &lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#Header 1&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;header-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Header 1&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;##Header 2&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;header-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Header 2&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;###Header 3&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;header-3&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Header 3&lt;/h3&gt;
&lt;p&gt;Add horizontal lines with at least three hyphens, asterisks, or underscores:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;***&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Tables are a little strange in the raw, but look nice once rendered.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| Right-aligned | Left-aligned | Centered | Default |
|-:|:-|:-:|-|
|1|1|1|1|
|12|12|12|12| 
|*1*|_2_|~~3~~|4^2^|&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;Right-aligned&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Left-aligned&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Centered&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;del&gt;3&lt;/del&gt;&lt;/td&gt;
&lt;td&gt;4&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Images are easy, too.&lt;br /&gt;
&lt;code&gt;![The adorabilis octopus, for your viewing pleasure](http://blogs.discovermagazine.com/d-brief/files/2015/06/octopus.jpg)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://blogs.discovermagazine.com/d-brief/files/2015/06/octopus.jpg&#34; alt=&#34;The adorabilis octopus, for your viewing pleasure&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;The adorabilis octopus, for your viewing pleasure&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;code&gt;[^1]:&lt;/code&gt; Are pretty easy.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data in the raw: Violin plots</title>
      <link>https://katherinemwood.github.io/post/violins/</link>
      <pubDate>Mon, 26 Jun 2017 15:27:06 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/violins/</guid>
      <description>&lt;p&gt;One of the ways we can increase transparency in science, in addition to posting our data, materials, and pre-registering our methods, is to start including more information about our raw data in our write-ups and reports. One of the ways we can do this is just show it in a visualization.&lt;/p&gt;
&lt;p&gt;The bar chart with error bars (usually &lt;span class=&#34;math inline&#34;&gt;\(\pm 1.96 \times\)&lt;/span&gt; standard error for a 95% confidence interval) is a classic plot type, but it obscures a lot of information about the underlying distribution that generated it. Scatterplots and histograms show more of the raw distribution, but they can be messy and hard to cleanly overlay with summary statistics.&lt;/p&gt;
&lt;p&gt;Fortunately, violin plots bring together the informativeness of a histogram with the cleanliness of a bar chart, and they can be easily overlaid with summary statistics, error bars, and other information without too much additional clutter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(dplyr)

set.seed(836)
dat &amp;lt;- data.frame(&amp;#39;condition&amp;#39;=c(rep(&amp;#39;t1&amp;#39;, 30), rep(&amp;#39;t2&amp;#39;, 30)), 
                  &amp;#39;value&amp;#39;=c(rnorm(30, 10, 3), rnorm(30, 20, 7)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the simplest incarnation of a violin plot, for two normally distributed groups:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;basic_violin &amp;lt;- ggplot(data=dat, aes(x=condition, y=value)) +
  geom_violin(aes(fill=condition, color=condition)) +
  theme_minimal()

print(basic_violin)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/violins_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;These might be more accurately called “jug” or “vase” plots, since they rarely make pretty violin shapes and more often tend to look like postmodern sculpture. Name aside, the violin plot is a rotated, symmetric kernel density plot that shows the density of points at different values. Where the plot is wide, there is a high density of points; where it is narrow, a low density of points (like height on a histogram). We can see here that group T1 is less variable than T2; T1’s violin is short and squat, meaning most of the points are massed in a small region. T2, on the other hand, is tall and narrow, meaning the points are spread thinner along a wider range of values&lt;/p&gt;
&lt;p&gt;These guys looks a little sparse, though. Why don’t we dress them up a smidge?&lt;/p&gt;
&lt;p&gt;Maybe you like a point mean and &lt;span class=&#34;math inline&#34;&gt;\(2*\)&lt;/span&gt;SE error bars:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;errbar_lims &amp;lt;- group_by(dat, condition) %&amp;gt;% 
              summarize(mean=mean(value), se=sd(value)/sqrt(n()), 
                        upper=mean+(2*se), lower=mean-(2*se))

mean_se_violin &amp;lt;- ggplot() +
  geom_violin(data=dat, aes(x=condition, y=value, fill=condition, color=condition)) +
  geom_point(data=errbar_lims, aes(x=condition, y=mean), size=3) +
  geom_errorbar(aes(x=errbar_lims$condition, ymax=errbar_lims$upper, 
                ymin=errbar_lims$lower), stat=&amp;#39;identity&amp;#39;, width=.25) +
  theme_minimal()

print(mean_se_violin)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/violins_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Or maybe boxplots are your jam:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot_violin &amp;lt;- ggplot(data=dat, aes(x=condition, y=value)) +
  geom_violin(aes(fill=condition, color=condition)) +
  geom_boxplot(width=.1, outlier.shape=NA) +
  theme_minimal()

print(boxplot_violin)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/violins_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here’s the way I like to do my violin plots, with each subject’s point plotted plus a horizontal line for the mean. I add a little horizontal jitter to each point to make things easier to see:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scatter_violin &amp;lt;- ggplot(data=dat, aes(x=condition, y=value)) +
  geom_violin(aes(fill=condition, color=condition)) +
  geom_crossbar(stat=&amp;quot;summary&amp;quot;, fun.y=mean, fun.ymax=mean, fun.ymin=mean, fatten=2, width=.5) +
  geom_point(color=&amp;quot;black&amp;quot;, size=1, position = position_jitter(w=0.05)) +
  theme_minimal()

print(scatter_violin)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/violins_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are a few things I really like about violin plots. One, they add a lot more information without taking up any more space than a bar plot would. Two, they give you an intuitive way to look at the distributions of your data. I don’t think many of us are accustomed to seeing data this way, and it goes to show that even well-behaved data doesn’t necessarily look like we might expect. &lt;code&gt;t1&lt;/code&gt; is just as normal as &lt;code&gt;t2&lt;/code&gt;, but &lt;code&gt;t1&lt;/code&gt; “looks” a lot more normal than &lt;code&gt;t2&lt;/code&gt; does. You lose a lot of the characteristics of the data with a bar plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bar_plot &amp;lt;- ggplot(data=errbar_lims) +
  geom_bar(aes(x=condition, y=mean, fill=condition, color=condition), stat=&amp;#39;identity&amp;#39;, position=&amp;#39;dodge&amp;#39;) +
  geom_errorbar(aes(x=condition, ymax=upper, 
                    ymin=lower), stat=&amp;#39;identity&amp;#39;, width=.25) +
  theme_minimal()

print(bar_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/violins_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It captures the broad strokes, to be sure, but a lot of the finer details disappear.&lt;/p&gt;
&lt;p&gt;So there you go. Violin plots! Dress ’em up, dress ’em down. However you like them, they’re a nice plot type to have in your arsenal.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Primer on Data Wrangling</title>
      <link>https://katherinemwood.github.io/post/wrangling/</link>
      <pubDate>Mon, 26 Jun 2017 15:20:35 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/wrangling/</guid>
      <description>&lt;p&gt;I found &lt;a href=&#34;https://twitter.com/dalejbarr/status/826717889608765444&#34;&gt;this Twitter thread&lt;/a&gt; on the vagaries of data wrangling killing momentum interesting, particularly the notion of how frustrating it must be to be at point A with your data, see Point B, where you’d like to go, and have no idea how to get there. Even for those with programming experience, data wrangling can be an enormous chore.&lt;/p&gt;
&lt;p&gt;To that end, I thought I’d walk through a basic overview of how to accomplish some of the operations you might commonly encounter when you first get a data set. If you’re generating the data yourself, you can try to make your life easier by saving it in the format you want.&lt;/p&gt;
&lt;p&gt;Where possible, I’ll show multiple ways to accomplish something and try to highlight packages that will make things easier.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MANDATORY DISCLAIMER:&lt;/strong&gt; There are often at least six ways to do anything in R. If you don’t like any of the methods here, rest assured that there are others (and probably better ones, too); you can almost certainly find something that suits your style.&lt;/p&gt;
&lt;div id=&#34;reading-in-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reading in data&lt;/h1&gt;
&lt;div id=&#34;csv-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;CSV Files&lt;/h3&gt;
&lt;p&gt;First, I’m going to create some data to actually read in. The following code chunk will write three csv files to the current directory, each with 3 columns of random data. This is meant to simulate raw data from three different subjects.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Generate some dummy data
data &amp;lt;- replicate(3, mapply(rnorm, c(100, 100, 100),  c(10, 100, 1), c(2, 25, .5)), 
                  simplify = FALSE)
catch_output &amp;lt;- mapply(write.csv, data,
       mapply(paste, rep(&amp;quot;data&amp;quot;, times=length(data)),
              seq(1, length(data)),
              rep(&amp;quot;.csv&amp;quot;), sep=&amp;quot;&amp;quot;), row.names=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a common situation: one spreadsheet has all of a subject’s raw data, and you have a few dozen spreadsheets. First, let’s talk about an easy way to read that in as painlessly as possible. No for-loops needed here; we’ll just use the trusty &lt;code&gt;apply()&lt;/code&gt; family from base R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Note that if your data are not in your current directory, you need to either:
#Call, for ex., setwd(&amp;#39;~/my_data_folder&amp;#39;) to set the data folder as the current directory
#Specify the path in list.files and then have it return the full path name of each file, rather than #the relative path.
alldata &amp;lt;- lapply(list.files(pattern = &amp;#39;*.csv&amp;#39;), read.csv)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re accomplishing a few things in one line. First, the call to &lt;code&gt;list.files&lt;/code&gt; simply lists all of the files in your current directory. It has a bunch of optional arguments, too. You can specify a pattern, which is just a regex expression that specifies what you want. Here, I only want .csv files, so I specify that I want any file (“*&amp;quot; is a wildcard symbol allowing anything) that ends in the extension .csv. I can specify other arguments, like whether I want the full path names returned, whether I want it to also search sub-directories for files, and so on.&lt;/p&gt;
&lt;p&gt;After we have this list of files, we simply iterate over it and call &lt;code&gt;read.csv&lt;/code&gt; on each one. The end result is a list, wherein each element is one subject’s data frame.&lt;/p&gt;
&lt;p&gt;Now, a list of data frames is not the &lt;em&gt;most&lt;/em&gt; useful data format to have. Fortunately, it’s easy to bind this list together into one big data frame. Here’s how to bring it all together in base R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;subjects_all &amp;lt;- do.call(&amp;#39;rbind&amp;#39;, alldata)
head(subjects_all)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          V1        V2        V3
## 1 12.785490  97.99294 0.2746556
## 2 12.278420 117.31365 1.0880228
## 3  6.768356  85.64516 0.4223008
## 4  9.361346  81.62643 0.2646769
## 5 11.693622  82.50792 1.1522778
## 6 13.099701 175.58823 1.3244140&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the information about which data belong to each subject is lost here. You’ll need to add an identifier column, or make sure that each file has one, before reading it in this way.&lt;/p&gt;
&lt;p&gt;How about some good old dplyr?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
subjects_all &amp;lt;- bind_rows(alldata, .id=&amp;#39;subject&amp;#39;)
head(subjects_all)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subject        V1        V2        V3
## 1       1 12.785490  97.99294 0.2746556
## 2       1 12.278420 117.31365 1.0880228
## 3       1  6.768356  85.64516 0.4223008
## 4       1  9.361346  81.62643 0.2646769
## 5       1 11.693622  82.50792 1.1522778
## 6       1 13.099701 175.58823 1.3244140&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(subjects_all$subject)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the&lt;code&gt;.id&lt;/code&gt; argument to specify an ID column, which will keep track of where the data comes from.&lt;/p&gt;
&lt;p&gt;We can also use the handy rbindlist function from the &lt;a href=&#34;https://cran.r-project.org/web/packages/data.table/data.table.pdf&#34;&gt;data.table&lt;/a&gt;/&lt;a href=&#34;https://cran.r-project.org/web/packages/dtplyr/dtplyr.pdf&#34;&gt;dtplyr&lt;/a&gt; package. This will label the data automatically for us according to which data frame it came from; we can call this new column (specified by the id argument) anything we like.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)
subjects_all &amp;lt;- rbindlist(alldata, idcol=&amp;#39;subject&amp;#39;)
head(subjects_all)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    subject        V1        V2        V3
## 1:       1 12.785490  97.99294 0.2746556
## 2:       1 12.278420 117.31365 1.0880228
## 3:       1  6.768356  85.64516 0.4223008
## 4:       1  9.361346  81.62643 0.2646769
## 5:       1 11.693622  82.50792 1.1522778
## 6:       1 13.099701 175.58823 1.3244140&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(subjects_all$subject)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note also that &lt;code&gt;rbindlist()&lt;/code&gt; is an order of magnitude faster than &lt;code&gt;do.call&lt;/code&gt;. If you’ve got a lot of data, you’ll probably want to go with this function. &lt;code&gt;data.tables&lt;/code&gt; are extremely fast and memory efficient in general, and might be a good option if you’re working with truly huge amounts of data. For most uses, though, this kind of optimization isn’t really necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;text-files&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Text files&lt;/h3&gt;
&lt;p&gt;Same process. I’ll make some real quick:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;catch_output &amp;lt;- mapply(write.table, data,
       mapply(paste, rep(&amp;quot;data&amp;quot;, times=length(data)),
              seq(1, length(data)),
              rep(&amp;quot;.txt&amp;quot;), sep=&amp;quot;&amp;quot;), row.names=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To read it in, we just call &lt;code&gt;read.table&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;allsubjs &amp;lt;- lapply(list.files(pattern = &amp;#39;*.txt&amp;#39;), read.table, header=TRUE, colClasses=c(&amp;#39;double&amp;#39;))
head(allsubjs[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          V1        V2        V3
## 1 12.785490  97.99294 0.2746556
## 2 12.278420 117.31365 1.0880228
## 3  6.768356  85.64516 0.4223008
## 4  9.361346  81.62643 0.2646769
## 5 11.693622  82.50792 1.1522778
## 6 13.099701 175.58823 1.3244140&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like before, we end up with a list of data frames, one for each subject. In &lt;code&gt;read.table()&lt;/code&gt;, unlike &lt;code&gt;read.csv&lt;/code&gt;, the &lt;code&gt;header&lt;/code&gt; argument defaults to &lt;code&gt;FALSE&lt;/code&gt;, so be sure to change that. I also specify &lt;code&gt;colClasses&lt;/code&gt; here to tell R what type of data the content of the columns is. Without that, these doubles get read in as factors; doing it now saves a little work later.&lt;/p&gt;
&lt;p&gt;We can then bind these together with &lt;code&gt;rbindlist&lt;/code&gt; just like we did when we used &lt;code&gt;read.csv&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;xlsx&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;XLS(X)&lt;/h3&gt;
&lt;p&gt;Need to read in Excel files, or read in each sheet in one file as a separate set of data?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/readxl/readxl.pdf&#34;&gt;Jenny Bryan et al. to the rescue.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;some-general-notes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Some general notes&lt;/h3&gt;
&lt;p&gt;There are a lot of arguments you can specify in the &lt;code&gt;read.csv&lt;/code&gt; function call that can save you work down the line–I used some of them when I was reading in the text files, but there are many more. You can even tell the function what strings should be read as NA values! This is really handy if you have NULL and what R to treat that as NA. You can also read in only part of the file, which is useful if you have a monster file and want to read it in in chunks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reshaping-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reshaping Data&lt;/h1&gt;
&lt;p&gt;It’s helpful to be able to switch at will between data in wide format, where each row is a subject and each column contains a variable, to long format, where each row is a value at a given time, or measure (for repeated measures).&lt;/p&gt;
&lt;p&gt;Here’s a very simple data set. Each row is a subject’s scores. Column 1 is their subject number, followed by their scores in the control, treatment 1, and treatment 2 conditions. We tend to be most accustomed to seeing data this way. This is “wide” format.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;traits &amp;lt;- data.frame(&amp;#39;id&amp;#39;=seq(1, 10),
                     &amp;#39;control&amp;#39;=floor(rnorm(10, 30, 5)),
                     &amp;#39;treat1&amp;#39;=floor(rnorm(10, 10, 2)),
                     &amp;#39;treat2&amp;#39;=floor(rnorm(10, 15, 3)))
print(traits)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id control treat1 treat2
## 1   1      29      8     15
## 2   2      25      7     15
## 3   3      30     12     19
## 4   4      32      7     17
## 5   5      37      9     13
## 6   6      30     10     12
## 7   7      27      8     16
## 8   8      20     12     15
## 9   9      25      7      9
## 10 10      21      8     15&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;wide-to-long&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wide to Long&lt;/h3&gt;
&lt;p&gt;Now, when we cast this to “long” format, we will have the id column (the subject number), a variable column (in this case, which test was taken), and the value column (the score on each test). Here it is, melted two ways. In base:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;traits_long_base &amp;lt;- reshape(traits, idvar=&amp;quot;id&amp;quot;, direction=&amp;#39;long&amp;#39;, v.names=c(&amp;#39;score&amp;#39;),
                       timevar=&amp;#39;test&amp;#39;,times=c(&amp;#39;control&amp;#39;, &amp;#39;treat1&amp;#39;, &amp;#39;treat2&amp;#39;), varying=seq(2, 4))
print(traits_long_base)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            id    test score
## 1.control   1 control    29
## 2.control   2 control    25
## 3.control   3 control    30
## 4.control   4 control    32
## 5.control   5 control    37
## 6.control   6 control    30
## 7.control   7 control    27
## 8.control   8 control    20
## 9.control   9 control    25
## 10.control 10 control    21
## 1.treat1    1  treat1     8
## 2.treat1    2  treat1     7
## 3.treat1    3  treat1    12
## 4.treat1    4  treat1     7
## 5.treat1    5  treat1     9
## 6.treat1    6  treat1    10
## 7.treat1    7  treat1     8
## 8.treat1    8  treat1    12
## 9.treat1    9  treat1     7
## 10.treat1  10  treat1     8
## 1.treat2    1  treat2    15
## 2.treat2    2  treat2    15
## 3.treat2    3  treat2    19
## 4.treat2    4  treat2    17
## 5.treat2    5  treat2    13
## 6.treat2    6  treat2    12
## 7.treat2    7  treat2    16
## 8.treat2    8  treat2    15
## 9.treat2    9  treat2     9
## 10.treat2  10  treat2    15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have to be pretty careful about specifying our arguments here. The &lt;code&gt;idvar&lt;/code&gt; indicates which column we want to map over the data. Here, we want the subject number; we want each subject’s score on each test labeled with their unique ID. Direction is fairly self-explanatory; we’re going to long form here. &lt;code&gt;v.names&lt;/code&gt; is the name (or names) of the new columns. Here, we’re collapsing everybody’s scores into a single column, so we call it &lt;code&gt;&#39;score&#39;&lt;/code&gt;. &lt;code&gt;timevar&lt;/code&gt; is the variable that changes over time, or over repeated measures. Here it’s which test they took, so we call the new column &lt;code&gt;&#39;test&#39;&lt;/code&gt;. Then we tell it which values to use in this new times column with &lt;code&gt;times&lt;/code&gt;; we want the name of the test. Then we tell it which columns of our data are varying over time/are our repeated measures; here it’s the final three columns (you can also specify a vector of strings).&lt;/p&gt;
&lt;p&gt;Here are the same results with the &lt;code&gt;melt()&lt;/code&gt; function from data.table or reshape2. We specify again which column represents our data labels, and then we tell it which columns we want it to treat as our “measures,” which in our case is our three tests (if unspecified, it just uses all non-id variables, so we could have left it out here):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;traits_long_m &amp;lt;- melt(traits, id.vars=&amp;quot;id&amp;quot;, measure.vars=c(&amp;#39;control&amp;#39;, &amp;#39;treat1&amp;#39;, &amp;#39;treat2&amp;#39;), 
                    variable.name=&amp;#39;test&amp;#39;, value.name=&amp;#39;score&amp;#39;)
print(traits_long_m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id    test score
## 1   1 control    29
## 2   2 control    25
## 3   3 control    30
## 4   4 control    32
## 5   5 control    37
## 6   6 control    30
## 7   7 control    27
## 8   8 control    20
## 9   9 control    25
## 10 10 control    21
## 11  1  treat1     8
## 12  2  treat1     7
## 13  3  treat1    12
## 14  4  treat1     7
## 15  5  treat1     9
## 16  6  treat1    10
## 17  7  treat1     8
## 18  8  treat1    12
## 19  9  treat1     7
## 20 10  treat1     8
## 21  1  treat2    15
## 22  2  treat2    15
## 23  3  treat2    19
## 24  4  treat2    17
## 25  5  treat2    13
## 26  6  treat2    12
## 27  7  treat2    16
## 28  8  treat2    15
## 29  9  treat2     9
## 30 10  treat2    15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And let’s not leave out &lt;code&gt;tidyr&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)
traits_long_t &amp;lt;- gather(traits, key=test, value=score, control, treat1, treat2)
print(traits_long_t)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id    test score
## 1   1 control    29
## 2   2 control    25
## 3   3 control    30
## 4   4 control    32
## 5   5 control    37
## 6   6 control    30
## 7   7 control    27
## 8   8 control    20
## 9   9 control    25
## 10 10 control    21
## 11  1  treat1     8
## 12  2  treat1     7
## 13  3  treat1    12
## 14  4  treat1     7
## 15  5  treat1     9
## 16  6  treat1    10
## 17  7  treat1     8
## 18  8  treat1    12
## 19  9  treat1     7
## 20 10  treat1     8
## 21  1  treat2    15
## 22  2  treat2    15
## 23  3  treat2    19
## 24  4  treat2    17
## 25  5  treat2    13
## 26  6  treat2    12
## 27  7  treat2    16
## 28  8  treat2    15
## 29  9  treat2     9
## 30 10  treat2    15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the key/value pairing tells us about our outcome columns, and then we just list the columns to gather up.&lt;/p&gt;
&lt;p&gt;Three roads, same destination. I find &lt;code&gt;melt&lt;/code&gt; and &lt;code&gt;gather&lt;/code&gt; both much more intuitive than &lt;code&gt;reshape&lt;/code&gt;, with &lt;code&gt;gather&lt;/code&gt; the easiest of them all to use, but your mileage may vary.&lt;/p&gt;
&lt;p&gt;Data is &lt;em&gt;really&lt;/em&gt; easy to plot this way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
plot &amp;lt;- ggplot(traits_long_t, aes(x=test, y=score, color=test)) +
        geom_point()
print(plot)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/wrangling_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt; Simplicity itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;long-to-wide&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Long to Wide&lt;/h3&gt;
&lt;p&gt;Now, if we want to go the other direction (long to wide), in base R, we call the same function with different arguments:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;traits_wide_base &amp;lt;- reshape(traits_long_base, direction=&amp;#39;wide&amp;#39;, timevar=&amp;#39;test&amp;#39;, idvar=&amp;#39;id&amp;#39;)
print(traits_wide_base)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            id score.control score.treat1 score.treat2
## 1.control   1            29            8           15
## 2.control   2            25            7           15
## 3.control   3            30           12           19
## 4.control   4            32            7           17
## 5.control   5            37            9           13
## 6.control   6            30           10           12
## 7.control   7            27            8           16
## 8.control   8            20           12           15
## 9.control   9            25            7            9
## 10.control 10            21            8           15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the original structure of our data back.&lt;/p&gt;
&lt;p&gt;The inverse of &lt;code&gt;melt()&lt;/code&gt; is &lt;code&gt;dcast&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;traits_wide_m &amp;lt;- dcast(traits_long_m, id ~ test, value.var=&amp;#39;score&amp;#39;)
print(traits_wide_m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id control treat1 treat2
## 1   1      29      8     15
## 2   2      25      7     15
## 3   3      30     12     19
## 4   4      32      7     17
## 5   5      37      9     13
## 6   6      30     10     12
## 7   7      27      8     16
## 8   8      20     12     15
## 9   9      25      7      9
## 10 10      21      8     15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Right back to where we were.&lt;/p&gt;
&lt;p&gt;And to undo &lt;code&gt;gather&lt;/code&gt;, we &lt;code&gt;spread&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;traits_wide_t &amp;lt;- spread(traits_long_t, test, score)
print(traits_wide_t)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    id control treat1 treat2
## 1   1      29      8     15
## 2   2      25      7     15
## 3   3      30     12     19
## 4   4      32      7     17
## 5   5      37      9     13
## 6   6      30     10     12
## 7   7      27      8     16
## 8   8      20     12     15
## 9   9      25      7      9
## 10 10      21      8     15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reshaping-with-more-variables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reshaping with more variables&lt;/h3&gt;
&lt;p&gt;Here’s a more complex example.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;traittest &amp;lt;- data.frame(&amp;#39;traitA&amp;#39;=factor(rep(c(&amp;#39;high&amp;#39;, &amp;#39;med&amp;#39;, &amp;#39;low&amp;#39;), each=4)),
                        &amp;#39;traitB&amp;#39;=factor(rep(c(&amp;#39;positive&amp;#39;, &amp;#39;negative&amp;#39;), times=6)),
                        &amp;#39;test1&amp;#39;=floor(rnorm(12, 10, 2)), &amp;#39;test2&amp;#39;=floor(rnorm(12, 15, 2)))
head(traittest)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   traitA   traitB test1 test2
## 1   high positive    10    14
## 2   high negative     8    15
## 3   high positive    11    18
## 4   high negative     5    17
## 5    med positive    10    13
## 6    med negative     9    11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a lot of ways to melt this data. Maybe we want to collpase the tests into a single column–in this case the traits are the identifier variables.&lt;/p&gt;
&lt;p&gt;In base:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt_bytrait_base &amp;lt;- reshape(traittest, direction=&amp;#39;long&amp;#39;, v.names=&amp;#39;score&amp;#39;,
                           timevar=&amp;#39;test&amp;#39;, times=c(&amp;#39;test1&amp;#39;, &amp;#39;test2&amp;#39;), varying=c(&amp;#39;test1&amp;#39;,&amp;#39;test2&amp;#39;))
print(tt_bytrait_base)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          traitA   traitB  test score id
## 1.test1    high positive test1    10  1
## 2.test1    high negative test1     8  2
## 3.test1    high positive test1    11  3
## 4.test1    high negative test1     5  4
## 5.test1     med positive test1    10  5
## 6.test1     med negative test1     9  6
## 7.test1     med positive test1     6  7
## 8.test1     med negative test1     8  8
## 9.test1     low positive test1     7  9
## 10.test1    low negative test1    10 10
## 11.test1    low positive test1     9 11
## 12.test1    low negative test1    12 12
## 1.test2    high positive test2    14  1
## 2.test2    high negative test2    15  2
## 3.test2    high positive test2    18  3
## 4.test2    high negative test2    17  4
## 5.test2     med positive test2    13  5
## 6.test2     med negative test2    11  6
## 7.test2     med positive test2    15  7
## 8.test2     med negative test2    12  8
## 9.test2     low positive test2    12  9
## 10.test2    low negative test2    15 10
## 11.test2    low positive test2    14 11
## 12.test2    low negative test2    14 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;melt()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt_bytrait_m &amp;lt;- melt(traittest, measure.vars=c(&amp;#39;test1&amp;#39;, &amp;#39;test2&amp;#39;), variable.name=&amp;#39;test&amp;#39;,
                  value.name=&amp;#39;score&amp;#39;)
head(tt_bytrait_m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   traitA   traitB  test score
## 1   high positive test1    10
## 2   high negative test1     8
## 3   high positive test1    11
## 4   high negative test1     5
## 5    med positive test1    10
## 6    med negative test1     9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;gather&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt_bytrait_t &amp;lt;- gather(traittest, test, score, test1, test2)
head(tt_bytrait_t)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   traitA   traitB  test score
## 1   high positive test1    10
## 2   high negative test1     8
## 3   high positive test1    11
## 4   high negative test1     5
## 5    med positive test1    10
## 6    med negative test1     9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, we can let the tests be the identifiers, and collapse the traits into a single column.&lt;/p&gt;
&lt;p&gt;Base:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt_bytest_base &amp;lt;- reshape(traittest, direction=&amp;#39;long&amp;#39;, v.names=&amp;#39;rating&amp;#39;,
                          timevar=&amp;#39;trait&amp;#39;, times=c(&amp;#39;traitA&amp;#39;, &amp;#39;traitB&amp;#39;), 
                          varying=c(&amp;#39;traitA&amp;#39;,&amp;#39;traitB&amp;#39;))
print(tt_bytest_base)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           test1 test2  trait   rating id
## 1.traitA     10    14 traitA     high  1
## 2.traitA      8    15 traitA     high  2
## 3.traitA     11    18 traitA     high  3
## 4.traitA      5    17 traitA     high  4
## 5.traitA     10    13 traitA      med  5
## 6.traitA      9    11 traitA      med  6
## 7.traitA      6    15 traitA      med  7
## 8.traitA      8    12 traitA      med  8
## 9.traitA      7    12 traitA      low  9
## 10.traitA    10    15 traitA      low 10
## 11.traitA     9    14 traitA      low 11
## 12.traitA    12    14 traitA      low 12
## 1.traitB     10    14 traitB positive  1
## 2.traitB      8    15 traitB negative  2
## 3.traitB     11    18 traitB positive  3
## 4.traitB      5    17 traitB negative  4
## 5.traitB     10    13 traitB positive  5
## 6.traitB      9    11 traitB negative  6
## 7.traitB      6    15 traitB positive  7
## 8.traitB      8    12 traitB negative  8
## 9.traitB      7    12 traitB positive  9
## 10.traitB    10    15 traitB negative 10
## 11.traitB     9    14 traitB positive 11
## 12.traitB    12    14 traitB negative 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;melt&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt_bytest_m &amp;lt;- melt(traittest, measure.vars=c(&amp;#39;traitA&amp;#39;, &amp;#39;traitB&amp;#39;),
                  variable.name=&amp;#39;trait&amp;#39;, value.name=&amp;#39;rating&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: attributes are not identical across measure variables; they will
## be dropped&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(tt_bytest_m)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   test1 test2  trait rating
## 1    10    14 traitA   high
## 2     8    15 traitA   high
## 3    11    18 traitA   high
## 4     5    17 traitA   high
## 5    10    13 traitA    med
## 6     9    11 traitA    med&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(We can ignore the warning; it’s warning us about the fact that we’re combining two factors that don’t share levels, so it’s coercing them all to characters.)&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;gather&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt_bytest_t &amp;lt;- gather(traittest, trait, rating, traitA, traitB)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: attributes are not identical across measure variables; they will
## be dropped&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(tt_bytest_t)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   test1 test2  trait rating
## 1    10    14 traitA   high
## 2     8    15 traitA   high
## 3    11    18 traitA   high
## 4     5    17 traitA   high
## 5    10    13 traitA    med
## 6     9    11 traitA    med&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Same warning as above.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reformatting-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reformatting Data&lt;/h1&gt;
&lt;p&gt;So we’ve read data in, and can flip it between long and wide at will. Great, but what if the data itself needs to be fixed?&lt;/p&gt;
&lt;div id=&#34;recoding-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Recoding values&lt;/h3&gt;
&lt;p&gt;Let’s say you have some data that look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yesno &amp;lt;- data.frame(&amp;#39;subj&amp;#39;=seq(1,10), &amp;#39;resp&amp;#39;=rep(c(&amp;#39;Y&amp;#39;,&amp;#39;N&amp;#39;), each=5))
print(yesno)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    subj resp
## 1     1    Y
## 2     2    Y
## 3     3    Y
## 4     4    Y
## 5     5    Y
## 6     6    N
## 7     7    N
## 8     8    N
## 9     9    N
## 10   10    N&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we have 10 subjects, and each one responded either yes (Y) or no (N) to… something. But maybe we don’t like the way this is coded; Y and N are hard to work with if we want to find average accuracy, for example. Maybe we want 1’s and 0’s instead, with which it is easy to do calculations.&lt;/p&gt;
&lt;p&gt;If we want to recode these values, we have a few options. We can use indexing, of course, but there are also some functions that will save you some work.&lt;/p&gt;
&lt;p&gt;Base has the &lt;code&gt;ifelse&lt;/code&gt; function, which performs a logical comparison, and if true, returns the first value; else, the second:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yesno$resp &amp;lt;- ifelse(yesno$resp == &amp;#39;Y&amp;#39;, 1, 0)
print(yesno)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    subj resp
## 1     1    1
## 2     2    1
## 3     3    1
## 4     4    1
## 5     5    1
## 6     6    0
## 7     7    0
## 8     8    0
## 9     9    0
## 10   10    0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we have more than two alternatives, you’ll have to use something like a &lt;code&gt;switch&lt;/code&gt; statement:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yesnomaybe &amp;lt;- data.frame(&amp;#39;subj&amp;#39;=seq(1,15), &amp;#39;resp&amp;#39;=rep(c(&amp;#39;Y&amp;#39;,&amp;#39;N&amp;#39;,&amp;#39;M&amp;#39;), each=5))
print(yesnomaybe)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    subj resp
## 1     1    Y
## 2     2    Y
## 3     3    Y
## 4     4    Y
## 5     5    Y
## 6     6    N
## 7     7    N
## 8     8    N
## 9     9    N
## 10   10    N
## 11   11    M
## 12   12    M
## 13   13    M
## 14   14    M
## 15   15    M&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have three options. Maybe we want ‘yes’ to be 1, ‘no’ to be -1, and ‘maybe’ to be 0. Here’s how you can do it with a &lt;code&gt;switch&lt;/code&gt; statement and &lt;code&gt;sapply&lt;/code&gt; to call it on each element:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yesnomaybe$resp &amp;lt;- sapply(yesnomaybe$resp, function(x) switch(as.character(x), &amp;#39;Y&amp;#39;=1, &amp;#39;N&amp;#39;=-1,
                                                              &amp;#39;M&amp;#39;=0))
print(yesnomaybe)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    subj resp
## 1     1    1
## 2     2    1
## 3     3    1
## 4     4    1
## 5     5    1
## 6     6   -1
## 7     7   -1
## 8     8   -1
## 9     9   -1
## 10   10   -1
## 11   11    0
## 12   12    0
## 13   13    0
## 14   14    0
## 15   15    0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;dplyr&lt;/code&gt;, we have the &lt;code&gt;recode&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;yesnomaybe$dplyr_recode &amp;lt;- recode(yesnomaybe$resp, `1`=&amp;#39;yes&amp;#39;, `-1`=&amp;#39;no&amp;#39;, `0`=&amp;#39;maybe&amp;#39;)
print(yesnomaybe)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    subj resp dplyr_recode
## 1     1    1          yes
## 2     2    1          yes
## 3     3    1          yes
## 4     4    1          yes
## 5     5    1          yes
## 6     6   -1           no
## 7     7   -1           no
## 8     8   -1           no
## 9     9   -1           no
## 10   10   -1           no
## 11   11    0        maybe
## 12   12    0        maybe
## 13   13    0        maybe
## 14   14    0        maybe
## 15   15    0        maybe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recoding, assuming you don’t have to do it for a huge number of possibilities, goes pretty fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-variables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding variables&lt;/h3&gt;
&lt;p&gt;Variables can be added to an existing data frame just with the &lt;code&gt;$&lt;/code&gt; operator:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data.frame(&amp;#39;x&amp;#39;=rnorm(20, 6), &amp;#39;y&amp;#39;=rnorm(20))
print(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           x             y
## 1  6.382563 -0.6349377198
## 2  5.178651  0.5779947820
## 3  6.900055 -0.8934466449
## 4  5.639740 -0.7364991053
## 5  8.502692  0.0371889397
## 6  5.831706 -1.4478027904
## 7  6.557657  0.5066507289
## 8  7.136671 -1.3353171159
## 9  6.551727  0.0476008133
## 10 6.908234 -1.1269031121
## 11 7.012459 -0.8295170243
## 12 5.392363 -0.2064574107
## 13 6.301966 -0.3643905354
## 14 4.965744 -0.0321969865
## 15 4.890624  1.1440986573
## 16 5.753496  0.4643063017
## 17 5.860616  0.0009191402
## 18 4.878040  0.5575799644
## 19 5.845903  2.2756946745
## 20 6.071341 -1.2962272395&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$z &amp;lt;- rnorm(20, 10)
print(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           x             y         z
## 1  6.382563 -0.6349377198 10.292958
## 2  5.178651  0.5779947820 11.052622
## 3  6.900055 -0.8934466449 10.077596
## 4  5.639740 -0.7364991053  8.906206
## 5  8.502692  0.0371889397  9.858233
## 6  5.831706 -1.4478027904  9.340396
## 7  6.557657  0.5066507289  9.117452
## 8  7.136671 -1.3353171159 10.169221
## 9  6.551727  0.0476008133 10.578182
## 10 6.908234 -1.1269031121 11.584164
## 11 7.012459 -0.8295170243  8.057977
## 12 5.392363 -0.2064574107 10.071884
## 13 6.301966 -0.3643905354  9.832434
## 14 4.965744 -0.0321969865 10.276102
## 15 4.890624  1.1440986573 10.001042
## 16 5.753496  0.4643063017  9.872071
## 17 5.860616  0.0009191402  8.938737
## 18 4.878040  0.5575799644 10.092249
## 19 5.845903  2.2756946745  9.631067
## 20 6.071341 -1.2962272395 10.700845&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you need to manipulate two data vectors that are numeric, you can just add, multiply, etc. your columns together to perform these operations elementwise:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$total &amp;lt;- with(df, x + y + z)
head(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          x           y         z    total
## 1 6.382563 -0.63493772 10.292958 16.04058
## 2 5.178651  0.57799478 11.052622 16.80927
## 3 6.900055 -0.89344664 10.077596 16.08420
## 4 5.639740 -0.73649911  8.906206 13.80945
## 5 8.502692  0.03718894  9.858233 18.39811
## 6 5.831706 -1.44780279  9.340396 13.72430&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also have a lot of options in the &lt;code&gt;dplyr&lt;/code&gt; library, notably &lt;code&gt;transform&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- transform(df, x = -x)
head(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           x           y         z    total
## 1 -6.382563 -0.63493772 10.292958 16.04058
## 2 -5.178651  0.57799478 11.052622 16.80927
## 3 -6.900055 -0.89344664 10.077596 16.08420
## 4 -5.639740 -0.73649911  8.906206 13.80945
## 5 -8.502692  0.03718894  9.858233 18.39811
## 6 -5.831706 -1.44780279  9.340396 13.72430&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But now that we’ve updated a column, our total is wrong. Let’s fix it with &lt;code&gt;transmute&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- mutate(df, corrected_total = x + y + z)
head(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           x           y         z    total corrected_total
## 1 -6.382563 -0.63493772 10.292958 16.04058        3.275458
## 2 -5.178651  0.57799478 11.052622 16.80927        6.451965
## 3 -6.900055 -0.89344664 10.077596 16.08420        2.284093
## 4 -5.639740 -0.73649911  8.906206 13.80945        2.529967
## 5 -8.502692  0.03718894  9.858233 18.39811        1.392730
## 6 -5.831706 -1.44780279  9.340396 13.72430        2.060887&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe I now want a dataframe just of the even numbers in the x column, and the residuals from total and corrected total (for… reasons). &lt;code&gt;transmute&lt;/code&gt; is like mutate, but it throws away all the extra:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_even &amp;lt;- transmute(df, x_ev=floor(x)%%2==0, residuals=total-corrected_total)
head(df_even)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x_ev residuals
## 1 FALSE  12.76513
## 2  TRUE  10.35730
## 3 FALSE  13.80011
## 4  TRUE  11.27948
## 5 FALSE  17.00538
## 6  TRUE  11.66341&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If none of these methods fit the bill, you can call &lt;code&gt;apply&lt;/code&gt; along all the columns or rows of your data frame and write a custom function to do whatever processing you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;factor-levels-as-column-labels&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Factor levels as column labels&lt;/h3&gt;
&lt;p&gt;Let’s take the unfortunate case of levels-as-columns, in which all the levels of a factor are columns, and people get a 1 or a 0 for each level instead of their value. Here’s some example data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levs &amp;lt;- data.frame(&amp;#39;subj&amp;#39;=seq(1, 4), &amp;#39;a&amp;#39;=c(0, 0, 1, 0), &amp;#39;b&amp;#39;=c(1, 0, 0, 1), &amp;#39;c&amp;#39;=c(0, 1, 0, 0))
print(levs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj a b c
## 1    1 0 1 0
## 2    2 0 0 1
## 3    3 1 0 0
## 4    4 0 1 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, what we have are three subjects, and a factor with three possible levels: A, B, and C. What we want is the subject and the actual level of their factor, so we need a 2-column matrix.&lt;/p&gt;
&lt;p&gt;Here’s one way we might do that (there are others) that uses some procedures I’ve already shown. First, we’ll reshape the dataframe so that the factors end up in one column. This has the advantage of putting the actual values of the factors we want all in one place. Then we filter out the 0s, leaving behind only the levels the subject actually selected, drop the redundant ones colum, then put the subjects back in the right order.&lt;/p&gt;
&lt;p&gt;For these examples, I’ll print out each intermediate stage of manipulation so that you can see what’s happening.&lt;/p&gt;
&lt;p&gt;All about that base:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lev_long &amp;lt;- reshape(levs, idvar=&amp;#39;subj&amp;#39;, direction=&amp;#39;long&amp;#39;, v.names=&amp;#39;value&amp;#39;, timevar=&amp;#39;trait&amp;#39;,
                    times=c(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;), varying=c(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     subj trait value
## 1.a    1     a     0
## 2.a    2     a     0
## 3.a    3     a     1
## 4.a    4     a     0
## 1.b    1     b     1
## 2.b    2     b     0
## 3.b    3     b     0
## 4.b    4     b     1
## 1.c    1     c     0
## 2.c    2     c     1
## 3.c    3     c     0
## 4.c    4     c     0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we reshape the data. We need all of the factor-related pieces of information in a single column. We have a column with the possible factor levels, and a column indicating 0 (not the subject’s level) or 1 (the subject’s level).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lev_filtered &amp;lt;- with(lev_long, lev_long[value == 1, 1:2]))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     subj trait
## 3.a    3     a
## 1.b    1     b
## 4.b    4     b
## 2.c    2     c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second step just uses good old-fashioned indexing to keep all rows where the value is 1 (aka, the subject has that level), and to keep only the useful subject and trait columns; what the &lt;code&gt;with&lt;/code&gt; function does is tell R to perform all operations with the supplied data set, so we can reference columns by isolated names rather than having to do the verbose &lt;code&gt;data_frame$column&lt;/code&gt; syntax.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lev_reformed_base &amp;lt;- lev_filtered[order(lev_filtered$subj),])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     subj trait
## 1.b    1     b
## 2.c    2     c
## 3.a    3     a
## 4.b    4     b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final step is reordering the data according to the subject column in ascending order. Now we’ve got our data in a much more sensible format.&lt;/p&gt;
&lt;p&gt;Tidyr and dplyr make quick work of this. First, we gather:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lev_g &amp;lt;- gather(levs, trait, value, a, b, c))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    subj trait value
## 1     1     a     0
## 2     2     a     0
## 3     3     a     1
## 4     4     a     0
## 5     1     b     1
## 6     2     b     0
## 7     3     b     0
## 8     4     b     1
## 9     1     c     0
## 10    2     c     1
## 11    3     c     0
## 12    4     c     0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Filter out the 0s:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lev_f &amp;lt;- filter(lev_g, value != 0))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj trait value
## 1    3     a     1
## 2    1     b     1
## 3    4     b     1
## 4    2     c     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Retain only the useful columns:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lev_s &amp;lt;- select(lev_f, subj, trait))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj trait
## 1    3     a
## 2    1     b
## 3    4     b
## 4    2     c&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, put the subjects back in order:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(lev_reform &amp;lt;- arrange(lev_s, subj))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj trait
## 1    1     b
## 2    2     c
## 3    3     a
## 4    4     b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are those steps strung together with piping and thus obviating the need for all those separate variable assignments:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levs_reformed &amp;lt;- gather(levs, trait, value, a, b, c) %&amp;gt;%
                filter(value != 0) %&amp;gt;%
                select(subj, trait) %&amp;gt;%
                arrange(subj)
print(levs_reformed)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj trait
## 1    1     b
## 2    2     c
## 3    3     a
## 4    4     b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Charming!&lt;/p&gt;
&lt;p&gt;What about if we have multiple factors? Here we have a test and a report, each of which has three possible levels: ABC and XYZ, respectively.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mfac &amp;lt;- data.frame(&amp;#39;subj&amp;#39;=seq(1, 4), &amp;#39;test.A&amp;#39;=c(0, 1, 0, 1), &amp;#39;test.B&amp;#39;=c(1, 0, 0, 0), 
                   &amp;#39;test.C&amp;#39;=c(0, 0, 1, 0), &amp;#39;report.X&amp;#39;=c(1, 0, 0, 0), 
                   &amp;#39;report.Y&amp;#39;=c(0, 1, 1, 0), &amp;#39;report.Z&amp;#39;=c(0, 0, 0, 1))
print(mfac)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj test.A test.B test.C report.X report.Y report.Z
## 1    1      0      1      0        1        0        0
## 2    2      1      0      0        0        1        0
## 3    3      0      0      1        0        1        0
## 4    4      1      0      0        0        0        1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what we want is a dataframe with three columns: subject number, test, and report. Subject 1 picked test A and report X, subject 2 picked test A and report Y, and so on.&lt;/p&gt;
&lt;p&gt;This gets a little more complicated. If we collapse everything into one column, we’re going to have to then spread it back out to separate the factors. We’ve also got the item label merged to its type, which is a problem if we only want the letter designation.&lt;/p&gt;
&lt;p&gt;Let’s try with base. Here’s the reshape-filter method:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mfac_long &amp;lt;- reshape(mfac, idvar=&amp;#39;subj&amp;#39;, direction=&amp;#39;long&amp;#39;, v.names=&amp;#39;value&amp;#39;, timevar=&amp;#39;measure&amp;#39;,
                    times=colnames(mfac)[-1], varying=colnames(mfac)[-1])
mfac_filtered &amp;lt;- with(mfac_long, mfac_long[value == 1, 1:2])
type_splits &amp;lt;- do.call(rbind, strsplit(mfac_filtered$measure, &amp;#39;.&amp;#39;, fixed=TRUE))
mfac_sep &amp;lt;- data.frame(&amp;#39;subj&amp;#39;=mfac_filtered$subj, 
                       &amp;#39;type&amp;#39;=type_splits[,1], 
                       &amp;#39;version&amp;#39;=type_splits[,2])
mfac_wide &amp;lt;- reshape(mfac_sep, idvar=&amp;#39;subj&amp;#39;, direction=&amp;#39;wide&amp;#39;, timevar=&amp;#39;type&amp;#39;)
(mfac_reformed_base &amp;lt;- mfac_wide[order(mfac_wide$subj),])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj version.test version.report
## 3    1            B              X
## 1    2            A              Y
## 4    3            C              Y
## 2    4            A              Z&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pulling this off takes more finagling. Things are fine when we reshape and filter (note the trick used to save some verbage in reshape(); indexing with a negative excludes that item, so we’re saying we want all column names except the first), but then we have to recover whether our factor was a test or a report &lt;em&gt;separately&lt;/em&gt; of its type. This means we have to split the string using &lt;code&gt;strsplit&lt;/code&gt;, bind the results into a matrix (because they automatically come out as a list), and then take those newly-made factors and reshape it wide again with the test type and report type as their own columns. One nice thing about this approach, in spite of its many steps, is that it’s totally blind to the content of the labels (provided they are consistently delimited). If they’re labeled in a cooperative way, you don’t need to know how many labels there are or what they say, and they can be in any order.&lt;/p&gt;
&lt;p&gt;Here’s another base approach, from my BFF Kelly Chang. This one uses the &lt;code&gt;apply&lt;/code&gt; function to sweep a filter down the dataframe, then repackage the results:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;labels &amp;lt;- c(&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;Y&amp;#39;, &amp;#39;Z&amp;#39;)
filtered &amp;lt;- t(apply(mfac[,2:ncol(mfac)], 1, function(x) labels[x==1]))
mfac_kc &amp;lt;- data.frame(mfac$subj, filtered)
colnames(mfac_kc) &amp;lt;- c(&amp;#39;subj&amp;#39;, &amp;#39;test&amp;#39;, &amp;#39;report&amp;#39;)
print(mfac_kc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj test report
## 1    1    B      X
## 2    2    A      Y
## 3    3    C      Y
## 4    4    A      Z&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, you would supply the labels, rather than recovering them from the data itself (as was done in the previous approach). Here, order is important; the labels need to be in the same order as the corresponding columns for the filter to work.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;tidyr&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt;, this approach can look something like this (still agnostic to the label content):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mfac_reformed &amp;lt;- gather(mfac, measure, value, -subj) %&amp;gt;%
                filter(value != 0) %&amp;gt;%
                select(subj, measure) %&amp;gt;%
                separate(measure, c(&amp;#39;test&amp;#39;, &amp;#39;type&amp;#39;)) %&amp;gt;%
                spread(test, type) %&amp;gt;%
                arrange(subj)
print(mfac_reformed)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   subj report test
## 1    1      X    B
## 2    2      Y    A
## 3    3      Y    C
## 4    4      Z    A&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first few steps are the same; melt everything down and toss the zero values. Then, we need a step to yank apart the measure’s letter designation and its type. Fortunately, &lt;code&gt;tidyr&lt;/code&gt; has a handy &lt;code&gt;separate&lt;/code&gt; function that does just this; it pulls apart the joined values into two columns that we can label right away. Then, we need to spread our now distinct factor types back into columns–one for the test and one for the report–and sort by subject.&lt;/p&gt;
&lt;p&gt;Note also that the intermediate steps in this last example, when we had to separate the two types of factors and get two separate ones back from the &lt;code&gt;report.X&lt;/code&gt; format, which involved splitting the string and reshaping the data, can also be useful if you have data in this form, or if you have one big code for a condition or trial and at some point want to split it into its components. You can also use the &lt;code&gt;colsplit()&lt;/code&gt; function from the &lt;code&gt;reshape2&lt;/code&gt; package for this purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;parting-thoughts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Parting Thoughts&lt;/h1&gt;
&lt;p&gt;And there you have it–a brief introduction to some common data manipulation tasks, and a few ways to handle them. This is only the thinnest of samples of methods. There are lots of different ways to accomplish things, and packages to help you do it. Many of these methods will undoubtedly have my fingerprints all over them; one of the reasons I approached these problems the way I did is to show how learning a skill in one context–reshaping data for plotting, for example–can be useful in other contexts, like changing a data frame’s fundamental structure. Many roads lead to the same place, and if you don’t like this one, another will get you there just as comfortably, if not more so.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Intro to Bootstrapping</title>
      <link>https://katherinemwood.github.io/post/bootstrapping/</link>
      <pubDate>Mon, 26 Jun 2017 15:02:58 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/bootstrapping/</guid>
      <description>&lt;p&gt;The bootstrap, detailed by Efron and Tibshirani in their 1993 book &lt;em&gt;An Introduction to the Bootstrap,&lt;/em&gt; is a powerful, flexible statistical concept based on the idea of “pulling yourself up by your bootstraps.” With today’s computing power, it’s easier than ever to apply and use. It also happens to be one of my favorite statistical tricks because of the elegance of the underlying logic.&lt;/p&gt;
&lt;p&gt;The idea behind the bootstrap is simple. We know that if we repeatedly sample groups from the population, our measurement of that population will get increasingly accurate, becoming perfect when we’ve sampled every member of the population (and thus obviating the need for statistics at all). However, this world, like worlds without friction in physics, don’t resemble operating conditions. In the real world, you typically get one sample from your population. If only we could easily resample from the population a few more times.&lt;/p&gt;
&lt;p&gt;Bootstrapping gets you the next best thing. We don’t resample from the population. Instead, we continuously resample &lt;em&gt;our own data&lt;/em&gt;,with replacement, and generate a so-called bootstrapped distribution. We can then use this distribution to quantify uncertainty on all kinds of measures.&lt;/p&gt;
&lt;p&gt;I’ll work through an example to show how this works in practice. We’ll sample from the normal to start, &lt;span class=&#34;math inline&#34;&gt;\(\mu = 1.25\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\sigma = 0.5\)&lt;/span&gt;. I’ve set the seed within the script so you’ll get exactly the results I find here.&lt;/p&gt;
&lt;p&gt;Let’s say we run a study with 50 people, and we’re interested in, among other things, getting a good estimation of the mean of the underlying population. So, you take your 50 people, take a mean, get a standard error, and maybe 95% confidence intervals to show the variation (± 1.96*SE).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(effsize)
#Set the seed for reproducable results
set.seed(123)
#Generate some random normal data
x &amp;lt;- rnorm(50, 1.25, .5)
mean(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.267202&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sd(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.462935&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Calculate the SE the old fashioned way
se &amp;lt;- sd(x)/sqrt(50)
#Get 95% CIs with the formula
lb_se &amp;lt;- mean(x) - 1.96*se
ub_se &amp;lt;- mean(x) + 1.96*se&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[Just to note: bootstrapped confidence intervals give you a nice measure of uncertainty, and I like to use them as my error bars, but they don’t get you away from the problems of NHST, if that’s something you’re trying to avoid.]&lt;/p&gt;
&lt;p&gt;Here’s a histogram of our sample. In this post, I’m plotting everything in base just for the thrill:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(x,  breaks=10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/bootstrapping_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here are the stats for our mean, calculated the old-fashioned way from an n of 50:&lt;/p&gt;
&lt;p&gt;mean: 1.27&lt;br /&gt;
SE: 0.18&lt;br /&gt;
95% CI: [1.14, 1.40]&lt;/p&gt;
&lt;p&gt;Now, let’s bootstrap this mean. A way to conceptualize this is to imagine re-running your 50-person experiment over and over again, except we’re not going to be drawing new subjects from the population. Instead, we’re going to draw groups of 50 subjects from our &lt;em&gt;sample,&lt;/em&gt; but do so with replacement. This means that some subjects may show up more than once, and some may never show up at all. We’ll take the mean of each group. We’ll do this many times–here, 1000–and so we end up with a distribution of 1000 means.&lt;/p&gt;
&lt;p&gt;For this basic procedure, we can do it in just one line:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boot &amp;lt;- replicate(1000, mean(sample(x, 50, replace=TRUE)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here’s the resulting histogram:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lb &amp;lt;- sort(boot)[.025*1000]
ub &amp;lt;- sort(boot)[.975*1000]
#Plot a histogram of the bootstrapped distribution, the
#mean, and the 95% bootstrapped CI
hist(boot, breaks=50)
abline(v=c(mean(boot), lb, ub), col=rep(&amp;#39;red&amp;#39;, 3), lty=c(1, 2, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/bootstrapping_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The bootstrapped mean (1.27) is of course centered on our sample mean. Now we have a distribution of values for the mean that we could expect to obtain with our sample.&lt;/p&gt;
&lt;p&gt;Now, if we wanted to do confidence intervals, we could get the SE of the bootstrapped distribution and do it the usual way. However, we also have an option available to us called the &lt;em&gt;percentile method.&lt;/em&gt; In order to find the confidence intervals, we sort all of our bootstrapped values, and then take the 2.5% quantile and the 97.5% quantile. If you repeat the sampling procedure with the same process on the same population (precisely what we do with our bootstrap), 95% of the time the mean falls between these endpoints. If we do this procedure with our particular sample, we get this:&lt;/p&gt;
&lt;p&gt;95% bootstrapped CI: [1.14, 1.40]&lt;/p&gt;
&lt;p&gt;Here, the bootstrapped CI and the standard-error derived CI match up (not that surprising, since our data is normally distributed and therefore exceptionally well-behaved!). However, if you have constrained data, such as accuracy, bootstrapped confidence intervals will automatically conform to those limits and won’t exceed 100% or dip below 0%.&lt;/p&gt;
&lt;p&gt;Here’s an example of bootstrapping the estimate of the effect size. We’re going to assume a between-subjects design here. We’ll make two independent, normally distributed groups with a true effect of .5. I’m going to let the &lt;code&gt;cohen.d&lt;/code&gt; function from the effsize package do the heavy lifting and give me both the estimate and the confidence interval:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;groups &amp;lt;- data.frame(&amp;#39;exp&amp;#39;=rnorm(50, .5, 1), &amp;#39;control&amp;#39;=rnorm(50))
(es &amp;lt;- cohen.d(groups$exp, groups$control))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Cohen&amp;#39;s d
## 
## d estimate: 0.5537571 (medium)
## 95 percent confidence interval:
##       inf       sup 
## 0.1493285 0.9581857&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s how we would bootstrap those same intervals. We resample each group independently, because it’s between-subjects. The procedure is much the same if it’s within subjects, except you would resample your &lt;em&gt;pairs&lt;/em&gt; of data because the two groups are not independent in that case. The code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boot_es &amp;lt;- replicate(1000, cohen.d(sample(groups$exp, 50, replace=TRUE), 
                                   sample(groups$control, 50, replace=TRUE))$estimate)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here’s the histogram of the bootstrapped distribution, with the mean and bootstrapped CI plotted:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lb_es &amp;lt;- sort(boot_es)[.025*1000]
ub_es &amp;lt;- sort(boot_es)[.975*1000]
hist(boot_es, breaks=50)
abline(v=c(mean(boot_es), lb_es, ub_es), col=rep(&amp;#39;red&amp;#39;, 3), lty=c(1, 2, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/bootstrapping_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;bootstrapped mean: .56&lt;br /&gt;
95% bootstrapped CI: [.14, .99]&lt;/p&gt;
&lt;p&gt;And there you have it: bootstrapped confidence intervals on your effect sizes.&lt;/p&gt;
&lt;p&gt;There is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Bootstrapping_(statistics)&#34;&gt;incredible about of nuance&lt;/a&gt; in the bootstrap method, and many different ways to apply it to even the most complex data. You can use it for something as simple as confidence intervals on a mean, or as complicated as regression coefficients. It’s also great for getting CI estimates for statistics or measures that don’t have a formula method. The general idea–resample your own data to get estimates–underlies even the most complex applications of this method. If you understand the basic logic, it’s pretty easy to understand and start using new applications.&lt;/p&gt;
&lt;p&gt;If you are mathematically inclined, there have been many proofs and a lot of work showing the first- and second-order correctness of bootstrapping estimations. The method I showed here for confidence intervals is just the percentile method; although it has been shown to work well in a wide variety of situations, there are other approaches, some which offer bias correction and other improvements (&lt;a href=&#34;http://www-rohan.sdsu.edu/~babailey/stat672/BCa.pdf&#34;&gt;for example&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you want to get started, there are some R packages that will handle bootstrapping for you:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/boot/boot.pdf&#34;&gt;boot&lt;/a&gt; (general-purpose, and can generate many variants of the various methods)&lt;br /&gt;
&lt;a href=&#34;https://cran.r-project.org/web/packages/bootES/bootES.pdf&#34;&gt;bootES&lt;/a&gt; (for effect sizes in particular)&lt;/p&gt;
&lt;p&gt;And of course, if you want a really deep dive, you can check out the original book:&lt;/p&gt;
&lt;p&gt;Efron &amp;amp; Tibshirani, &lt;em&gt;An Introduction to the Bootstrap.&lt;/em&gt; Chapman &amp;amp; Hall/CRC, 1993.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Program better, for fun and for profit</title>
      <link>https://katherinemwood.github.io/post/programming/</link>
      <pubDate>Mon, 26 Jun 2017 14:35:49 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/programming/</guid>
      <description>&lt;p&gt;Psych researchers have a bit of a reputation for being, shall we say, less-than-delicate programmers. It’s common to hear “it doesn’t matter if it’s ugly, as long as it works.”&lt;/p&gt;
&lt;p&gt;I took computer science classes as an undergrad, and style was rigidly enforced. I had one notoriously strict professor who would dock up to a grade on an otherwise completely functional project if it was ugly. It wasn’t just simple elitism; ugly code is often inefficient code, and ugly code is hard to read and understand.&lt;/p&gt;
&lt;p&gt;Code quality is something I’m constantly working on. You can see the development in my scripts; I only recently started using dplyr and the rest of the tidyverse in R, and what a difference it’s made to the quality of my code. I cringe a little, looking back at my earliest scripts (and they’re a matter of public record, forever). Cringe is good, though. Cringe signals improvement, and wisdom gained.&lt;/p&gt;
&lt;p&gt;I thought I’d share a few of the practices that were drilled into me during my CS education that have helped improve the style, quality, and readability of my code.&lt;/p&gt;
&lt;div id=&#34;comment-your-code.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;1. Comment your code.&lt;/h1&gt;
&lt;p&gt;Please. If not for others, then for your future self. You will neither remember nor understand your code in the future as well as you think you will. I don’t to it as thoroughly as I ought; I’m not sure anyone does. This is easy to change, and doesn’t take much effort.&lt;/p&gt;
&lt;p&gt;Functions should be commented with what their inputs are, what it does to those inputs, and what it returns. For a gold star, you can include examples of input and output.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;&amp;#39;&amp;#39;
A function that takes in a list of integers X
and returns the arithmetic mean in floating-point
form.
&amp;#39;&amp;#39;&amp;#39;
def mean(x):
    return(sum(x)/float(len(x)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Global variables should be commented with what they are and how they’re used, so that you can change them without having to dig back through the code to make sure you understand what the variable does.&lt;/p&gt;
&lt;p&gt;Commenting code makes it much easier for others to understand, and it cuts way down on re-learning if you have to go back and revisit old code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;use-sensible-variable-and-function-names.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2. Use sensible variable and function names.&lt;/h1&gt;
&lt;p&gt;It very rapidly becomes impossible to tell what is happening when all variables are named &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;x2&lt;/code&gt;, or &lt;code&gt;tmp&lt;/code&gt;. While we want variable names to be succinct, they should also make sense and be recognizable. Degrees of freedom can be &lt;code&gt;df&lt;/code&gt;. A subject’s height could be &lt;code&gt;subj_height&lt;/code&gt;, rather than, say, &lt;code&gt;h&lt;/code&gt; or &lt;code&gt;s_h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is also good to do when you’re subsetting data. You don’t want to confuse yourself or others about which variable represents the full dataset, and which represents a subset!&lt;/p&gt;
&lt;p&gt;Functions should also, ideally, be named after what they do. &lt;code&gt;cartesian_to_polar(x, y)&lt;/code&gt; is obvious (if you know your coordinate systems); &lt;code&gt;c2p(x, y)&lt;/code&gt; less so.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;avoid-hardcoding.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;3. Avoid hardcoding.&lt;/h1&gt;
&lt;p&gt;“Hardcoding” is the practice of writing explicit, fixed values into functions and scripts instead of variables. So if you had a run_experiment function, hardcoded to do 100 trials, it might look like this:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def run_experiment():
    for i in range(100):
        do_trial(i)
do_other_stuff(i)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then maybe at the end of the script, you have to reference the number of trials again, maybe to calculate percent correct:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#let&amp;#39;s assume for convenience that yes_responses is a list of bools
correct_resp = sum(yes_responses)/100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works fine, but what if you decide to change the number of trials? Then you’ll have to hunt back through every place you used 100 and change it. What would be a lot easier is to define a variable, num_trials, at the beginning of your script. Then, every time you need to reference this number, use num_trials rather than the hard number. Then, if you change your mind, you only have to change the value of num_trials to change its value everywhere else in the script.&lt;/p&gt;
&lt;p&gt;This is especially relevant for experiment scripts, in which values might change over the course of development, or need to change during the experiment itself with the condition or trial type. It’s much more convenient to have all of you parameters mapped to variables in one place so that you only have to change them once to change behavior everywhere. Changes become easy and quick, and it will save heartache.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;think-modular.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;4. Think modular.&lt;/h1&gt;
&lt;p&gt;Break routines and operations into functions, particularly if you have to do them over and over again. For example, if you’re writing an experiment, you might want to have a function that handles a single trial, with some inputs that can be adjusted. Maybe you have long-exposure trials and short-exposure trials, for instance. It’s nice to be able to call &lt;code&gt;do_trial(long_ontime)&lt;/code&gt; or &lt;code&gt;do_trial(short_ontime)&lt;/code&gt;, rather than having all of that logic imbedded in one monster script. If you need more flexibility, just write the function to accept more variables and pass them in.&lt;/p&gt;
&lt;p&gt;If you have a function that you use a lot (I have one for saving out data), you can keep it in a separate file and source it in each time you need it, rather than rewriting it each time. Being able to re-use your code saves time and effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;be-succinct.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;5. Be succinct.&lt;/h1&gt;
&lt;p&gt;Often, there’s a verbose way to do something, and a concise way to do something. For instance, in Python, you can very often replace for-loops with list comprehensions. In R, just about every for-loop can be replaced with a combination of calls to the venerable &lt;code&gt;apply&lt;/code&gt; family of functions or to higher-order functions like &lt;code&gt;Reduce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://cran.r-project.org/web/packages/tidyverse/index.html&#34;&gt;&lt;code&gt;tidyverse&lt;/code&gt;&lt;/a&gt;, a diverse set of packages for R, makes many common data manipulation commands into short primitives. This can clean up and shorten code substantially, especially when extensive data manipulation is involved (see &lt;a href=&#34;https://katherinemwood.github.io/post/wrangling/&#34;&gt;this post&lt;/a&gt; for examples of it in action and how it compares to other base methods). It tends to be less verbose and more readable, although the latter is subjective to a point.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unit-test.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;6. Unit-test.&lt;/h1&gt;
&lt;p&gt;This is an example of doing more work now to do less work later. I’ve fallen out of the habit of unit-testing, but with the new year comes an opportunity to return to core values.&lt;/p&gt;
&lt;p&gt;In unit-testing, you write tests in a separate script for little pieces of your code. This is &lt;a href=&#34;https://docs.python.org/2/library/unittest.html&#34;&gt;easy in Python&lt;/a&gt;, and there’s a &lt;a href=&#34;https://cran.r-project.org/web/packages/testthat/testthat.pdf&#34;&gt;nice R package for it too&lt;/a&gt;. See &lt;a href=&#34;https://katherinemwood.github.io/post/testthat/&#34;&gt;this post&lt;/a&gt; to see it in action.&lt;/p&gt;
&lt;p&gt;The idea is that you test each piece of code (functions, object classes, etc) as you write it and verify that it works. Even better, you can write tests for code first, before you even write the code itself. Tests make sure that code runs without crashing, that the output it gives you matches what you expect, that objects have the methods and attributes you want and that they all do what you expect, and so on.&lt;/p&gt;
&lt;p&gt;Why bother? For one, it creates a nice feedback loop with modularity. Writing code in nice little packages makes it easy to test, which encourages writing code in nice little packages, etc. Two, it will save you a ton of time during debugging. If you write an entire script through, try to run it, and almost inevitably encounter bugs, you then have to search through a lot of possible failure points. Usually that means having to verify that all of the pieces work anyway, in order to zero in on the culprit(s). With unit testing, you know right away whether something is working and if it’s working correctly. This gives you a chance to fix things before you run the whole thing through.&lt;/p&gt;
&lt;p&gt;Following good practices only nets benefits. It makes your old code more accessible to yourself. Possibly more critically, it makes your code more accessible to others. Open data and open materials are becoming more common, and it’s not enough just to throw uncommented code up on Github and call it duty done. Part of that responsibility to openness is making code readable, understandable, and transparent.These practices are a good place to start.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>5 Minute Simulation: Variation in effect size estimates</title>
      <link>https://katherinemwood.github.io/post/es_var/</link>
      <pubDate>Mon, 26 Jun 2017 13:54:20 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/es_var/</guid>
      <description>&lt;p&gt;If it’s not terribly obvious, &lt;a href=&#34;http://shiny.rstudio.com/tutorial/&#34;&gt;Shiny&lt;/a&gt; is my new favorite toy. It’s incredibly accessible for beginners, gives you great results with minimal effort, and can be as sophisticated as you need it to be.&lt;/p&gt;
&lt;p&gt;I decided to throw together a quick simulation to look at the variation in effect size estimates we can expect at different sample sizes. There’s an increasing focus in psych on estimation of effects, rather than simply detection of effects. This is great, but, as it turns out, virtually impossible with a single study unless you are prepared to recruit massive numbers of subjects. Nothing here is new, but I like looking at distributions and playing with sliders, and I’ll take any excuse to make a little shiny widget.&lt;/p&gt;
&lt;p&gt;In this simulation, we’re doing a basic, between-groups t-test and drawing samples from the normal distribution. The code can be dead simple. I’ll write a tiny&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

sim_es &amp;lt;- function(n, true_es) {
  g1 &amp;lt;- rnorm(n, true_es, 1)
  g2 &amp;lt;- rnorm(n, 0, 1)
  return(effsize::cohen.d(g1, g2, paired=FALSE)$estimate)
}

plot_es &amp;lt;- function(data, true_es) {
  es_plot &amp;lt;- ggplot() +
      theme_minimal() +
      geom_histogram(aes(x=data, y=..count../sum(..count..)), 
               color=&amp;#39;darkblue&amp;#39;, fill=&amp;#39;darkblue&amp;#39;, position=&amp;#39;identity&amp;#39;) +
      geom_vline(xintercept=c(true_es,
                              sort(data)[.975*length(data)], 
                              sort(data)[.025*length(data)]), 
                 size=1.5, color=c(&amp;#39;lightgray&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;red&amp;#39;), 
                 linetype=c(&amp;#39;solid&amp;#39;, &amp;#39;longdash&amp;#39;,&amp;#39;longdash&amp;#39;)) +
      xlab(&amp;quot;Effect size&amp;quot;) +
      ylab(&amp;#39;Proportion&amp;#39;) +
      xlim(c(-2, 2))

  print(es_plot)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what you get if you use tiny (n=10) groups (perhaps under the justification that if an effect is big, you’ll detect it just fine in small samples) and no true effect is present:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n10 &amp;lt;- replicate(3000, sim_es(10, 0))
plot_es(n10, 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/es_var_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The white line is the true effect, and the two red lines mark out the 95% quantile.&lt;/p&gt;
&lt;p&gt;Yikes. With samples that small, you could (and will, often!) get an enormous effect when none is present.&lt;/p&gt;
&lt;p&gt;Here’s what we get with n = 50, no effect present. I’ve left the x-axis fixed to make it easier to compare all of these plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n50 &amp;lt;- replicate(3000, sim_es(50, 0))
plot_es(n50, 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/es_var_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is a dramatic improvement over n=10, but you could still estimate what is considered a small (d=.1, traditionally) to medium (d=.3, traditionally) effect in either direction with appreciable frequency.&lt;/p&gt;
&lt;p&gt;And here’s n=200.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n200 &amp;lt;- replicate(3000, sim_es(200, 0))
plot_es(n200, 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://katherinemwood.github.io/post/es_var_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I’ve used d=0 as an example, but you get this spread regardless of what the true d is; it will just shift to center on the true effect. In that case, you’ll detect an effect most of the time, but can be way off about its actual size. This doesn’t mean that you can throw power out the window by arguing that you only care about detection, of course–you’ll “detect” an effect a lot of the time when d=0 with small samples.&lt;/p&gt;
&lt;p&gt;These simulations are the result of 3000 replications each, but in the shiny app you can change this number.&lt;/p&gt;
&lt;p&gt;For me, this really drives home just how important replications and meta-analyses–cumulative science in general, really–are, particularly for estimation. When you do a lot of these studies over and over again, as these simulations model, you’ll zero in on the true effect, but a study can’t do it alone.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://katherinemwood.shinyapps.io/effect_size/&#34;&gt;The Shiny app can be found here&lt;/a&gt;. You can tweak group size, true effect size, how many simulations are run, and the limits on the x-axis. You can also view a plot of the corresponding p-values.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/katherinemwood/es_variation&#34;&gt;The source code can be found here.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open Science in Practice</title>
      <link>https://katherinemwood.github.io/post/open_sci/</link>
      <pubDate>Mon, 26 Jun 2017 13:48:35 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/open_sci/</guid>
      <description>&lt;p&gt;I will finish grad school a child of the replication crisis. My year and a half in grad school has been marked by bombshell failures-to-replicate, increasing adoption of Bayesian methods, and wider recognition of the insidious effects of questionable research practices.&lt;/p&gt;
&lt;p&gt;In many ways, I’m lucky. I didn’t have to make changes to the way I did things to adhere to better practices. I got to start with openness as one of the core tenets of how I conduct my research, and starting fresh is always easier than having to alter pre-existing patterns of behavior. It also helps to have a huge proponent of replication and open science as an advisor and to have come in at a time when there’s fantastic infrastructure in place.&lt;/p&gt;
&lt;p&gt;Here’s an example of what my process looks like. A lot of this has already been said by better minds, and none of what I do is revolutionary. But it can, perhaps, serve as an illustration of what it looks like to actually build these practices into your workflow.&lt;/p&gt;
&lt;div id=&#34;planning-and-preregistration&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Planning and preregistration&lt;/h2&gt;
&lt;p&gt;Once my advisor and I have finalized the approach to our next experiment, the preparation phase begins. I write-up and test my experiment script by running through the entire thing, as a subject would (and try to break it as a subject might).&lt;/p&gt;
&lt;p&gt;Because I’ve written the experiment script, I know exactly how the data will be saved out. This lets me write the entire analysis script, including wrangling, pre-processing, and figure generation. I test the functionality of the script on dummy data I generate during testing my experiment and make sure it runs properly.&lt;/p&gt;
&lt;p&gt;After this is done, it’s time to preregister–I like to do so at the &lt;a href=&#34;https://osf.io/&#34;&gt;Open Science Framework&lt;/a&gt;. I outline my hypotheses and upload hypothetical data figures if my predictions are sufficiently specific. I describe all of my experiment methods in gory detail, including all measures collected, and attach my experimental script and any stimuli I use. I detail exactly which hypotheses I’m going to test, and how (which statistical test; how many tails, if applicable; the values of any parameters, such as priors for Bayes Factors, etc.). I explicitly state how many subjects we’ll be running and how we’re going to exclude subjects from analysis. I also upload my analysis script and any helper functions or files.&lt;/p&gt;
&lt;p&gt;Once all of these things are in place, I preregister the project. My preferred method is to enter it into embargo, and then make the project public after the paper has been submitted.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-collection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Data collection&lt;/h2&gt;
&lt;p&gt;This tends to be uneventful, since everything has been battle-tested and all decision have already been made. I do not examine the data, even just to look, as it comes in, so that if something unforeseen emerges that requires a change to protocol, I can make a new preregistration on OSF and affirm that it has been done in absence of knowledge of the data. I collect as many subjects as I said I would in my preregistration.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Analysis&lt;/h2&gt;
&lt;p&gt;This also goes lightning-fast, because the script is already written. I just run the data through it, and know the results that I will be reporting as confirmatory immediately (no strolls through the garden of forking paths). This is great for me, because I cannot handle suspense when it comes to knowing the outcome of my experiments.&lt;/p&gt;
&lt;p&gt;That done, I can then poke around a little and explore the data if I wish, or do some robustness analyses. Anything that comes from this needs to be reported as exploratory if it is reported at all.&lt;/p&gt;
&lt;p&gt;I make sure to plot my raw data. Ideally I like to plot it along with my summary values in something like a violin plot (I like to do the raw points over the violin density graph, plus a line showing the mean and maybe some confidence intervals). It’s always a good idea to know the ins and outs of your data, which requires knowing what the raw distributions look like.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;post-raw-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;4. Post raw data&lt;/h2&gt;
&lt;p&gt;After the analysis is done, I add the raw data in its entirety to the project’s OSF page and include with it a README that provides detailed instructions on how to interpret the data. This has the nice added benefit of creating a secure backup of my data then and there.&lt;/p&gt;
&lt;p&gt;The project is still private at this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reporting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;5. Reporting&lt;/h2&gt;
&lt;p&gt;After repeating steps 1-4 as necessary for follow-up experiments, I write up the manuscript. The methods section is easy, as I pretty much wrote it already back in step 1. I make sure to include a link to my OSF page for the project, which I make public when submitting the manuscript, and include language making it clear that we report all conditions and measures.&lt;/p&gt;
&lt;p&gt;When we report our stats, we include all information necessary to recreate our analyses. This means correlations for within-subjects designs and cell means for ANOVAs. We also make sure to report how many people were excluded and what proportion of our sample that represents, and how many people ended up assigned to each condition, if applicable.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pre-prints&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;6. Pre-prints&lt;/h2&gt;
&lt;p&gt;After the manuscript has been accepted (I’ll take Wishful Thinking for $800, Alex), I upload a preprint of the accepted version to PsyarXiv. I will do this for all of my papers, but I think it’s especially important in cases where one cannot publish open access. Most journals will tell you what the policy is regarding posting the paper to external sources.&lt;/p&gt;
&lt;p&gt;You can, of course, post a preprint before the paper has been accepted (most of the time this will not preclude later publishing in a journal), but my papers tend to undergo radical transformation during peer review, so I prefer to post a more final version.&lt;/p&gt;
&lt;p&gt;And that’s my process. Integrating open science and best research practices takes a little practice, but once you’ve gotten comfortable with your workflow it’s as easy as any other habit (and comes with a lot of benefits for your trouble).&lt;/p&gt;
&lt;p&gt;This workflow works pretty well for me, but I think it can be better. This year I would like to start using figshare, and do version control for my scripts with GitHub, and look into using RMarkdown for papers. There’s always more to learn!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>5 Minute Simulation: Lonely Cards</title>
      <link>https://katherinemwood.github.io/post/lonely_cards/</link>
      <pubDate>Mon, 26 Jun 2017 12:34:18 -0500</pubDate>
      
      <guid>https://katherinemwood.github.io/post/lonely_cards/</guid>
      <description>&lt;p&gt;FiveThirtyEight posts math, logic, and probability puzzles each week. I was tempted by this week’s &lt;a href=&#34;http://fivethirtyeight.com/features/can-you-deal-with-these-card-game-puzzles/&#34;&gt;Riddler Express&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On snowy afternoons, you like to play a solitaire “game” with a standard, randomly shuffled deck of 52 cards. You start dealing cards face up, one at a time, into a pile. As you deal each card, you also speak aloud, in order, the 13 card faces in a standard deck: ace, two, three, etc. (When you get to king, you start over at ace.) You keep doing this until the rank of the card you deal matches the rank you speak aloud, in which case you lose. You win if you reach the end of the deck without any matches.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the probability that you win?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My combinatorics skills are rusty, so I’m still hacking away at the closed-form solution. But, where cunning fails, brute force may suffice. While the closed-form approach is proving challenging (for me), this is fairly trivial to approximate through simulation. Recreating the game itself only takes a line or two of code, and then we can “play” hundreds of thousands of simulated games to get an idea of how often we win. &lt;a href=&#34;https://katherinemwood.shinyapps.io/lonely_cards/&#34;&gt;Here’s a simple shiny app&lt;/a&gt; with the results, and here’s the dead-simple code for simulating the game itself:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cards &amp;lt;- function() {
#make a deck; leave this sequence fixed for the verbal sequence,
#and scramble it to simulate the cards being dealt
deck &amp;lt;- rep(c(&amp;#39;ace&amp;#39;, as.character(seq(2:10)),
&amp;#39;jack&amp;#39;, &amp;#39;queen&amp;#39;, &amp;#39;king&amp;#39;), times=4)
#You win if none of the ranks line up; you lose if one or more does
return(as.numeric(!(sum(deck == sample(deck)) &amp;gt; 0))) #1 is win, 0 is lose
}
results &amp;lt;- replicate(100000, cards())
paste(&amp;#39;Win percentage: &amp;#39;, sum(results)/1000,&amp;#39;%&amp;#39;, sep=&amp;#39;&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Win percentage: 1.648%&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ll update this post with the closed-form solution if I manage to work it out (failing that, I’ll just link to the solution on FiveThirtyEight).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/katherinemwood/lonely_cards&#34;&gt;Here’s the source code&lt;/a&gt; for the shiny app.&lt;/p&gt;
&lt;p&gt;UPDATE: It turns out the &lt;a href=&#34;https://fivethirtyeight.com/features/how-long-will-it-take-to-blow-out-the-birthday-candles/#correction&#34;&gt;closed-form solution to this riddle&lt;/a&gt; is nontrivial! It relies on a branch of combinatorics called &lt;a href=&#34;http://mathworld.wolfram.com/Derangement.html&#34;&gt;“derangements”&lt;/a&gt; I didn’t encounter in my (admittedly less than comprehensive) math and stats education.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reconciling change blindness with long-term memory for objects</title>
      <link>https://katherinemwood.github.io/publication/cbltm/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://katherinemwood.github.io/publication/cbltm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Shiny Effect Sizes</title>
      <link>https://katherinemwood.github.io/project/shiny_es/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://katherinemwood.github.io/project/shiny_es/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Two Sisters, One Dark Sky</title>
      <link>https://katherinemwood.github.io/project/darksky/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://katherinemwood.github.io/project/darksky/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
